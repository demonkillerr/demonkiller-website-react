"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[2177],{1890:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"code/languages/C/cli_and_sighandle","title":"Command-Line Arguments & Signal Handling in C","description":"This document covers Command-Line Arguments & Signal Handling in C.","source":"@site/docs/code/languages/C/cli_and_sighandle.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/cli_and_sighandle","permalink":"/docs/code/languages/C/cli_and_sighandle","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"demonkiller","lastUpdatedAt":1739852796000,"frontMatter":{"title":"Command-Line Arguments & Signal Handling in C","id":"cli_and_sighandle","sidebar_label":"CLI & Signal Handling"},"sidebar":"docs","previous":{"title":"Dynamic Data Structures","permalink":"/docs/code/languages/C/dynamic_data_structures"},"next":{"title":"Bit Manipulation","permalink":"/docs/code/languages/C/bit_manip"}}');var a=i(4848),s=i(8453);const t={title:"Command-Line Arguments & Signal Handling in C",id:"cli_and_sighandle",sidebar_label:"CLI & Signal Handling"},l=void 0,d={},c=[{value:"Command-Line Arguments (<code>argc, argv[]</code>)",id:"command-line-arguments-argc-argv",level:2},{value:"Understanding <code>argc</code> and <code>argv[]</code>",id:"understanding-argc-and-argv",level:3},{value:"<strong>Understanding <code>argc</code> and <code>argv[]</code></strong>",id:"understanding-argc-and-argv-1",level:3},{value:"Basic Command-Line Argument Handling",id:"basic-command-line-argument-handling",level:3},{value:"Example Run:",id:"example-run",level:4},{value:"Output:",id:"output",level:4},{value:"Converting Arguments to Integers (<code>atoi</code>, <code>strtol</code>)",id:"converting-arguments-to-integers-atoi-strtol",level:3},{value:"Signal Handling in C (<code>signal.h</code>)",id:"signal-handling-in-c-signalh",level:2},{value:"Catching SIGINT (Ctrl+C)",id:"catching-sigint-ctrlc",level:3},{value:"Ignoring a Signal (<code>SIGINT</code>, <code>SIGTERM</code>)",id:"ignoring-a-signal-sigint-sigterm",level:3},{value:"Graceful Termination (<code>SIGTERM</code>)",id:"graceful-termination-sigterm",level:3}];function o(n){const e={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"This document covers Command-Line Arguments & Signal Handling in C."}),"\n",(0,a.jsx)(e.p,{children:"Command-line arguments allow users to pass input values when executing a program. Signal handling enables programs to respond to system signals such as Ctrl+C (SIGINT) or termination signals (SIGTERM)."}),"\n",(0,a.jsx)(e.p,{children:"In this section, we will cover:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Command-Line Arguments (argc, argv[])"}),"\n",(0,a.jsx)(e.li,{children:"Handling Multiple Arguments"}),"\n",(0,a.jsx)(e.li,{children:"Converting String Inputs to Numbers (atoi, strtol)"}),"\n",(0,a.jsx)(e.li,{children:"Signal Handling (signal.h, SIGINT, SIGTERM)"}),"\n",(0,a.jsx)(e.li,{children:"Catching and Ignoring Signals"}),"\n",(0,a.jsx)(e.li,{children:"Graceful Termination of a Program"}),"\n"]}),"\n",(0,a.jsxs)(e.h2,{id:"command-line-arguments-argc-argv",children:["Command-Line Arguments (",(0,a.jsx)(e.code,{children:"argc, argv[]"}),")"]}),"\n",(0,a.jsx)(e.p,{children:"Command-line arguments allow passing values when running a program from the terminal."}),"\n",(0,a.jsxs)(e.h3,{id:"understanding-argc-and-argv",children:["Understanding ",(0,a.jsx)(e.code,{children:"argc"})," and ",(0,a.jsx)(e.code,{children:"argv[]"})]}),"\n",(0,a.jsx)(e.h3,{id:"understanding-argc-and-argv-1",children:(0,a.jsxs)(e.strong,{children:["Understanding ",(0,a.jsx)(e.code,{children:"argc"})," and ",(0,a.jsx)(e.code,{children:"argv[]"})]})}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:(0,a.jsx)(e.strong,{children:"Argument"})}),(0,a.jsx)(e.th,{children:(0,a.jsx)(e.strong,{children:"Description"})})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"argc"})}),(0,a.jsx)(e.td,{children:"Argument count (number of command-line arguments)"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"argv[]"})}),(0,a.jsx)(e.td,{children:"Argument vector (array of argument strings)"})]})]})]}),"\n",(0,a.jsx)(e.h3,{id:"basic-command-line-argument-handling",children:"Basic Command-Line Argument Handling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main(int argc, char *argv[]) {\n    printf("Argument count: %d\\n", argc);\n    for (int i = 0; i < argc; i++) {\n        printf("Argument %d: %s\\n", i, argv[i]);\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.h4,{id:"example-run",children:"Example Run:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"./program hello world\n"})}),"\n",(0,a.jsx)(e.h4,{id:"output",children:"Output:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"Argument count: 3\nArgument 0: ./program\nArgument 1: hello\nArgument 2: world\n"})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"argv[0]"})," is always the program name. Arguments are passed as strings."]})}),"\n",(0,a.jsxs)(e.h3,{id:"converting-arguments-to-integers-atoi-strtol",children:["Converting Arguments to Integers (",(0,a.jsx)(e.code,{children:"atoi"}),", ",(0,a.jsx)(e.code,{children:"strtol"}),")"]}),"\n",(0,a.jsx)(e.p,{children:"Command-line arguments are always strings. Convert them to numbers using:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        printf("Usage: %s <num1> <num2>\\n", argv[0]);\n        return 1;\n    }\n    int num1 = atoi(argv[1]);\n    int num2 = atoi(argv[2]);\n    printf("Sum: %d\\n", num1 + num2);\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"atoi()"})," converts a string to an integer (use ",(0,a.jsx)(e.code,{children:"strtol()"})," for better error handling). Always validate arguments before conversion."]})}),"\n",(0,a.jsxs)(e.h2,{id:"signal-handling-in-c-signalh",children:["Signal Handling in C (",(0,a.jsx)(e.code,{children:"signal.h"}),")"]}),"\n",(0,a.jsx)(e.p,{children:"Signals allow communication between processes and the OS. Programs can handle signals like SIGINT (Ctrl+C) and SIGTERM (termination request)."}),"\n",(0,a.jsx)(e.h3,{id:"catching-sigint-ctrlc",children:"Catching SIGINT (Ctrl+C)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <signal.h>\nvoid handle_sigint(int sig) {\n    printf("Caught signal %d (Ctrl+C), exiting safely...\\n", sig);\n}\nint main() {\n    signal(SIGINT, handle_sigint);\n    while (1) {\n        printf("Running... Press Ctrl+C to exit.\\n");\n        sleep(2);\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"signal(SIGINT, handle_sigint);"})," registers the signal handler."]}),"\n",(0,a.jsx)(e.li,{children:"Prevents abrupt termination, allowing cleanup before exit."}),"\n"]})}),"\n",(0,a.jsxs)(e.h3,{id:"ignoring-a-signal-sigint-sigterm",children:["Ignoring a Signal (",(0,a.jsx)(e.code,{children:"SIGINT"}),", ",(0,a.jsx)(e.code,{children:"SIGTERM"}),")"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <signal.h>\nint main() {\n    signal(SIGINT, SIG_IGN);  // Ignore Ctrl+C\n    while (1) {\n        printf("You cannot stop me with Ctrl+C!\\n");\n        sleep(2);\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsx)(e.p,{children:"Use Case: Prevents unintended termination of critical processes."})}),"\n",(0,a.jsxs)(e.h3,{id:"graceful-termination-sigterm",children:["Graceful Termination (",(0,a.jsx)(e.code,{children:"SIGTERM"}),")"]}),"\n",(0,a.jsx)(e.p,{children:"A program can handle termination requests (SIGTERM) and perform cleanup."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <signal.h>\n#include <stdlib.h>\nvoid handle_sigterm(int sig) {\n    printf("Received termination signal %d. Cleaning up...\\n", sig);\n    exit(0);\n}\nint main() {\n    signal(SIGTERM, handle_sigterm);\n    while (1) {\n        printf("Running... Send SIGTERM to stop.\\n");\n        sleep(2);\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsx)(e.p,{children:"Use Case: Servers, background processes, and daemons should clean up resources before exiting."})})]})}function g(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(o,{...n})}):o(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>l});var r=i(6540);const a={},s=r.createContext(a);function t(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:t(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);