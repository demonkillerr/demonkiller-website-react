"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[7629],{7898:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"code/languages/C/strings","title":"Strings in C","description":"This document covers strings in C.","source":"@site/docs/code/languages/C/strings.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/strings","permalink":"/docs/code/languages/C/strings","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"demonkiller","lastUpdatedAt":1739841196000,"frontMatter":{"title":"Strings in C","id":"strings","sidebar_label":"Strings"},"sidebar":"docs","previous":{"title":"Dynamic Memory","permalink":"/docs/code/languages/C/dynamic_mem_alloc"},"next":{"title":"Structures and Unions","permalink":"/docs/code/languages/C/structs_and_unions"}}');var r=e(4848),t=e(8453);const l={title:"Strings in C",id:"strings",sidebar_label:"Strings"},a=void 0,c={},o=[{value:"Declaring and Initializing Strings",id:"declaring-and-initializing-strings",level:2},{value:"Using Character Arrays",id:"using-character-arrays",level:3},{value:"Using Pointers",id:"using-pointers",level:3},{value:"Input and Output with Strings",id:"input-and-output-with-strings",level:2},{value:"Using <code>scanf()</code> and <code>printf()</code>",id:"using-scanf-and-printf",level:3},{value:"Using <code>fgets()</code>",id:"using-fgets",level:3},{value:"Common String Operations (<code>&lt;string.h&gt;</code>)",id:"common-string-operations-stringh",level:2},{value:"Finding String Length (strlen)",id:"finding-string-length-strlen",level:3},{value:"Copying a String (strcpy and strncpy)",id:"copying-a-string-strcpy-and-strncpy",level:3},{value:"Concatenating Strings (strcat and strncat)",id:"concatenating-strings-strcat-and-strncat",level:3},{value:"Comparing Strings (strcmp)",id:"comparing-strings-strcmp",level:3},{value:"Finding Substrings (strstr)",id:"finding-substrings-strstr",level:3},{value:"String Manipulation Using Pointers",id:"string-manipulation-using-pointers",level:2},{value:"Iterating Over a String Using Pointers",id:"iterating-over-a-string-using-pointers",level:3},{value:"Modifying Strings with Pointers",id:"modifying-strings-with-pointers",level:3},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Buffer Overflow",id:"buffer-overflow",level:3},{value:"Solution:",id:"solution",level:4},{value:"Forgetting Null Termination",id:"forgetting-null-termination",level:3},{value:"Solution:",id:"solution-1",level:4},{value:"Using <code>strcpy()</code> without checking buffer size",id:"using-strcpy-without-checking-buffer-size",level:3},{value:"Solution:",id:"solution-2",level:4}];function d(n){const i={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.p,{children:"This document covers strings in C."}),"\n",(0,r.jsx)(i.p,{children:"In C, a string is an array of characters terminated by a null character (\\0). Unlike other languages, C does not have a built-in string type, so handling strings requires using character arrays and pointers."}),"\n",(0,r.jsx)(i.p,{children:"In this section, we will cover:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Declaring and initializing strings."}),"\n",(0,r.jsx)(i.li,{children:"String input and output."}),"\n",(0,r.jsx)(i.li,{children:"Common string operations."}),"\n",(0,r.jsxs)(i.li,{children:["Using string functions from ",(0,r.jsx)(i.code,{children:"<string.h>"}),"."]}),"\n",(0,r.jsx)(i.li,{children:"String manipulation using pointers."}),"\n",(0,r.jsx)(i.li,{children:"Common pitfalls and best practices."}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"declaring-and-initializing-strings",children:"Declaring and Initializing Strings"}),"\n",(0,r.jsx)(i.h3,{id:"using-character-arrays",children:"Using Character Arrays"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"char str1[] = \"Hello\";  // Implicit null character added\nchar str2[6] = \"Hello\";  // Explicitly defining size (5 characters + '\\0')\nchar str3[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};  // Manually adding null character\n"})}),"\n",(0,r.jsx)(i.h3,{id:"using-pointers",children:"Using Pointers"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'char *str = "Hello";  // Pointer to string literal (stored in read-only memory)\nprintf("%s\\n", str);\n'})}),"\n",(0,r.jsx)(i.admonition,{type:"danger",children:(0,r.jsx)(i.p,{children:"Modifying *str (string literal) leads to undefined behavior!"})}),"\n",(0,r.jsx)(i.h2,{id:"input-and-output-with-strings",children:"Input and Output with Strings"}),"\n",(0,r.jsxs)(i.h3,{id:"using-scanf-and-printf",children:["Using ",(0,r.jsx)(i.code,{children:"scanf()"})," and ",(0,r.jsx)(i.code,{children:"printf()"})]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    char name[50];\n    printf("Enter your name: ");\n    scanf("%s", name);  // Reads a single word only\n    printf("Hello, %s!\\n", name);\n    return 0;\n}\n'})}),"\n",(0,r.jsxs)(i.admonition,{type:"warning",children:[(0,r.jsx)(i.mdxAdmonitionTitle,{}),(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"scanf()"})," cannot read spaces; it stops at the first whitespace."]})]}),"\n",(0,r.jsxs)(i.h3,{id:"using-fgets",children:["Using ",(0,r.jsx)(i.code,{children:"fgets()"})]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    char name[50];\n    printf("Enter your full name: ");\n    fgets(name, sizeof(name), stdin);  // Reads a full line, including spaces\n    printf("Hello, %s\\n", name);\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsx)(i.p,{children:"fgets() is safer because it prevents buffer overflow."})}),"\n",(0,r.jsxs)(i.h2,{id:"common-string-operations-stringh",children:["Common String Operations (",(0,r.jsx)(i.code,{children:"<string.h>"}),")"]}),"\n",(0,r.jsxs)(i.p,{children:["C provides several functions for string manipulation in ",(0,r.jsx)(i.code,{children:"<string.h>"}),"."]}),"\n",(0,r.jsx)(i.h3,{id:"finding-string-length-strlen",children:"Finding String Length (strlen)"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n#include <string.h>\nint main() {\n    char str[] = "Hello";\n    printf("Length: %lu\\n", strlen(str));\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(i.h3,{id:"copying-a-string-strcpy-and-strncpy",children:"Copying a String (strcpy and strncpy)"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'char src[] = "Hello";\nchar dest[10];\nstrcpy(dest, src);  // Copies "Hello" into dest\n'})}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsx)(i.p,{children:"Use strncpy() for safer copying with size limits."})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"strncpy(dest, src, sizeof(dest) - 1);\ndest[sizeof(dest) - 1] = '\\0';  // Ensures null termination\n"})}),"\n",(0,r.jsx)(i.h3,{id:"concatenating-strings-strcat-and-strncat",children:"Concatenating Strings (strcat and strncat)"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'char str1[20] = "Hello ";\nchar str2[] = "World!";\nstrcat(str1, str2);  // Appends str2 to str1\n'})}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsx)(i.p,{children:"Use strncat() for safer concatenation."})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"strncat(str1, str2, sizeof(str1) - strlen(str1) - 1);\n"})}),"\n",(0,r.jsx)(i.h3,{id:"comparing-strings-strcmp",children:"Comparing Strings (strcmp)"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'if (strcmp("hello", "Hello") == 0) {\n    printf("Strings are equal\\n");\n} else {\n    printf("Strings are not equal\\n");\n}\n'})}),"\n",(0,r.jsxs)(i.admonition,{type:"tip",children:[(0,r.jsx)(i.mdxAdmonitionTitle,{}),(0,r.jsx)(i.p,{children:"Use strcasecmp() for case-insensitive comparison."})]}),"\n",(0,r.jsx)(i.h3,{id:"finding-substrings-strstr",children:"Finding Substrings (strstr)"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'char *result = strstr("hello world", "world");\nif (result) {\n    printf("Substring found at position: %ld\\n", result - "hello world");\n}\n'})}),"\n",(0,r.jsx)(i.h2,{id:"string-manipulation-using-pointers",children:"String Manipulation Using Pointers"}),"\n",(0,r.jsx)(i.p,{children:"Strings can be manipulated directly using pointers."}),"\n",(0,r.jsx)(i.h3,{id:"iterating-over-a-string-using-pointers",children:"Iterating Over a String Using Pointers"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'char str[] = "Hello";\nchar *ptr = str;\nwhile (*ptr != \'\\0\') {\n    printf("%c ", *ptr);\n    ptr++;\n}\n'})}),"\n",(0,r.jsx)(i.h3,{id:"modifying-strings-with-pointers",children:"Modifying Strings with Pointers"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'char str[] = "Hello";\nchar *ptr = str;\nptr[1] = \'a\';  // Modifies "Hello" to "Hallo"\n'})}),"\n",(0,r.jsx)(i.admonition,{type:"warning",children:(0,r.jsx)(i.p,{children:"Cannot modify string literals this way!"})}),"\n",(0,r.jsx)(i.h2,{id:"common-pitfalls-and-best-practices",children:"Common Pitfalls and Best Practices"}),"\n",(0,r.jsx)(i.h3,{id:"buffer-overflow",children:"Buffer Overflow"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'char name[5];\nscanf("%s", name);  // Unsafe! Can exceed buffer size.\n'})}),"\n",(0,r.jsx)(i.h4,{id:"solution",children:"Solution:"}),"\n",(0,r.jsx)(i.p,{children:"Use fgets() instead of scanf()."}),"\n",(0,r.jsx)(i.h3,{id:"forgetting-null-termination",children:"Forgetting Null Termination"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"char str[5] = {'H', 'e', 'l', 'l', 'o'};  // Missing `\\0`\nprintf(\"%s\", str);  // Undefined behavior!\n"})}),"\n",(0,r.jsx)(i.h4,{id:"solution-1",children:"Solution:"}),"\n",(0,r.jsxs)(i.p,{children:["Always add ",(0,r.jsx)(i.code,{children:"\\0"})," manually or use a string literal."]}),"\n",(0,r.jsxs)(i.h3,{id:"using-strcpy-without-checking-buffer-size",children:["Using ",(0,r.jsx)(i.code,{children:"strcpy()"})," without checking buffer size"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'char dest[5];\nstrcpy(dest, "Too long");  // Buffer overflow risk!\n'})}),"\n",(0,r.jsx)(i.h4,{id:"solution-2",children:"Solution:"}),"\n",(0,r.jsxs)(i.p,{children:["Use ",(0,r.jsx)(i.code,{children:"strncpy()"})," and ensure null termination."]})]})}function g(n={}){const{wrapper:i}={...(0,t.R)(),...n.components};return i?(0,r.jsx)(i,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,i,e)=>{e.d(i,{R:()=>l,x:()=>a});var s=e(6540);const r={},t=s.createContext(r);function l(n){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function a(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),s.createElement(t.Provider,{value:i},n.children)}}}]);