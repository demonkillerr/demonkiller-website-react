"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[7030],{942:(i,n,e)=>{e.r(n),e.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"code/languages/C/bit_manip","title":"Bitwise Operators & Bit Manipulation in C","description":"This document covers Bitwise Operators & Bit Manipulation in C.","source":"@site/docs/code/languages/C/bit_manip.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/bit_manip","permalink":"/docs/code/languages/C/bit_manip","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Gaurang","lastUpdatedAt":1739855289000,"frontMatter":{"title":"Bitwise Operators & Bit Manipulation in C","id":"bit_manip","sidebar_label":"Bit Manipulation"},"sidebar":"docs","previous":{"title":"CLI & Signal Handling","permalink":"/docs/code/languages/C/cli_and_sighandle"},"next":{"title":"Project 1","permalink":"/docs/code/languages/C/project_1"}}');var s=e(4848),r=e(8453);const d={title:"Bitwise Operators & Bit Manipulation in C",id:"bit_manip",sidebar_label:"Bit Manipulation"},l=void 0,o={},c=[{value:"Bitwise Operators in C",id:"bitwise-operators-in-c",level:2},{value:"Overview of Bitwise Operators",id:"overview-of-bitwise-operators",level:3},{value:"<strong>Overview of Bitwise Operators</strong>",id:"overview-of-bitwise-operators-1",level:3},{value:"Practical Bitwise Operations",id:"practical-bitwise-operations",level:2},{value:"Setting a Bit (Bit Masking with OR |)",id:"setting-a-bit-bit-masking-with-or-",level:3},{value:"Example: Setting the 3rd Bit of num (Starting from 0)",id:"example-setting-the-3rd-bit-of-num-starting-from-0",level:4},{value:"Clearing a Bit (Using AND &amp; and NOT ~)",id:"clearing-a-bit-using-and--and-not-",level:3},{value:"Example: Clearing the 2nd Bit of num",id:"example-clearing-the-2nd-bit-of-num",level:4},{value:"Toggling a Bit (Using XOR ^)",id:"toggling-a-bit-using-xor-",level:3},{value:"Example: Toggling the 1st Bit of num",id:"example-toggling-the-1st-bit-of-num",level:4},{value:"Bitwise Shifting (<code>&lt;&lt;, &gt;&gt;</code>)",id:"bitwise-shifting--",level:2},{value:"Left Shift <code>(&lt;&lt;)</code> \u2013 Multiplication by Powers of 2",id:"left-shift---multiplication-by-powers-of-2",level:3},{value:"Right Shift <code>(&gt;&gt;)</code> \u2013 Division by Powers of 2",id:"right-shift---division-by-powers-of-2",level:3},{value:"Checking If a Number is Even or Odd (Using &amp;)",id:"checking-if-a-number-is-even-or-odd-using-",level:2}];function a(i){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...i.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This document covers Bitwise Operators & Bit Manipulation in C."}),"\n",(0,s.jsx)(n.p,{children:"Bitwise operators in C allow manipulation of individual bits within data types. They are used in low-level programming, memory optimization, encryption, and embedded systems."}),"\n",(0,s.jsx)(n.p,{children:"In this section, we will cover:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Bitwise AND ",(0,s.jsx)(n.code,{children:"(&)"}),", OR ",(0,s.jsx)(n.code,{children:"(|)"}),", XOR ",(0,s.jsx)(n.code,{children:"(^)"}),", NOT ",(0,s.jsx)(n.code,{children:"(~)"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Left Shift ",(0,s.jsx)(n.code,{children:"(<<)"})," and Right Shift ",(0,s.jsx)(n.code,{children:"(>>)"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Bit Masks (Setting, Clearing, and Toggling Bits)."}),"\n",(0,s.jsx)(n.li,{children:"Practical Use Cases in Optimization and Low-Level Programming."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"bitwise-operators-in-c",children:"Bitwise Operators in C"}),"\n",(0,s.jsx)(n.h3,{id:"overview-of-bitwise-operators",children:"Overview of Bitwise Operators"}),"\n",(0,s.jsx)(n.h3,{id:"overview-of-bitwise-operators-1",children:(0,s.jsx)(n.strong,{children:"Overview of Bitwise Operators"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Operator"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Symbol"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})}),(0,s.jsx)(n.th,{children:(0,s.jsxs)(n.strong,{children:["Example (",(0,s.jsx)(n.code,{children:"a = 5, b = 3"}),")"]})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Bitwise AND"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"&"})}),(0,s.jsx)(n.td,{children:"Performs AND on each bit"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"5 & 3 = 1"})," (0101 & 0011 = 0001)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Bitwise OR"})}),(0,s.jsx)(n.td,{children:"`"}),(0,s.jsx)(n.td,{children:"`"}),(0,s.jsx)(n.td,{children:"Performs OR on each bit"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Bitwise XOR"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"^"})}),(0,s.jsx)(n.td,{children:"Performs XOR (exclusive OR) on each bit"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"5 ^ 3 = 6"})," (0101 ^ 0011 = 0110)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Bitwise NOT"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"~"})}),(0,s.jsx)(n.td,{children:"Inverts each bit"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"~5 = -6"})," (Two's complement)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Left Shift"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<<"})}),(0,s.jsx)(n.td,{children:"Shifts bits to the left"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"5 << 1 = 10"})," (0101 \u2192 1010)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Right Shift"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:">>"})}),(0,s.jsx)(n.td,{children:"Shifts bits to the right"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"5 >> 1 = 2"})," (0101 \u2192 0010)"]})]})]})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Bitwise AND ",(0,s.jsx)(n.code,{children:"(&)"})," is useful for bit masking."]}),"\n",(0,s.jsxs)(n.li,{children:["Bitwise OR ",(0,s.jsx)(n.code,{children:"(|)"})," is used to set bits."]}),"\n",(0,s.jsxs)(n.li,{children:["Bitwise XOR ",(0,s.jsx)(n.code,{children:"(^)"})," is used for toggling bits and encryption."]}),"\n",(0,s.jsxs)(n.li,{children:["Left shift ",(0,s.jsx)(n.code,{children:"(<<)"})," is equivalent to multiplying by powers of two."]}),"\n",(0,s.jsxs)(n.li,{children:["Right shift ",(0,s.jsx)(n.code,{children:"(>>)"})," is equivalent to integer division by powers of two."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"practical-bitwise-operations",children:"Practical Bitwise Operations"}),"\n",(0,s.jsx)(n.h3,{id:"setting-a-bit-bit-masking-with-or-",children:"Setting a Bit (Bit Masking with OR |)"}),"\n",(0,s.jsx)(n.p,{children:"To set a specific bit to 1:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"num = num | (1 << bitPosition);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-setting-the-3rd-bit-of-num-starting-from-0",children:"Example: Setting the 3rd Bit of num (Starting from 0)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int num = 5;  // Binary: 0101\n    num |= (1 << 2);  // Set bit at position 2\n    printf("New value: %d\\n", num);  // Output: 7 (0111)\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Use Case: Setting feature flags, permissions, or hardware registers."})}),"\n",(0,s.jsx)(n.h3,{id:"clearing-a-bit-using-and--and-not-",children:"Clearing a Bit (Using AND & and NOT ~)"}),"\n",(0,s.jsx)(n.p,{children:"To clear a specific bit (set it to 0):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"num = num & ~(1 << bitPosition);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-clearing-the-2nd-bit-of-num",children:"Example: Clearing the 2nd Bit of num"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int num = 7;  // Binary: 0111\n    num &= ~(1 << 2);  // Clear bit at position 2\n    printf("New value: %d\\n", num);  // Output: 3 (0011)\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Use Case: Disabling specific bits in configuration settings."})}),"\n",(0,s.jsx)(n.h3,{id:"toggling-a-bit-using-xor-",children:"Toggling a Bit (Using XOR ^)"}),"\n",(0,s.jsx)(n.p,{children:"To toggle (flip) a specific bit:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"num = num ^ (1 << bitPosition);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-toggling-the-1st-bit-of-num",children:"Example: Toggling the 1st Bit of num"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int num = 5;  // Binary: 0101\n    num ^= (1 << 1);  // Toggle bit at position 1\n    printf("New value: %d\\n", num);  // Output: 7 (0111)\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Use Case: Useful in encryption and bit manipulation algorithms."})}),"\n",(0,s.jsxs)(n.h2,{id:"bitwise-shifting--",children:["Bitwise Shifting (",(0,s.jsx)(n.code,{children:"<<, >>"}),")"]}),"\n",(0,s.jsxs)(n.h3,{id:"left-shift---multiplication-by-powers-of-2",children:["Left Shift ",(0,s.jsx)(n.code,{children:"(<<)"})," \u2013 Multiplication by Powers of 2"]}),"\n",(0,s.jsxs)(n.p,{children:["Shifting left multiplies by ",(0,s.jsx)(n.code,{children:"2^n"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int num = 3;\n    printf("%d\\n", num << 1);  // Output: 6\n    printf("%d\\n", num << 2);  // Output: 12\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Use Case: Fast multiplication without using ",(0,s.jsx)(n.code,{children:"*"}),"."]})}),"\n",(0,s.jsxs)(n.h3,{id:"right-shift---division-by-powers-of-2",children:["Right Shift ",(0,s.jsx)(n.code,{children:"(>>)"})," \u2013 Division by Powers of 2"]}),"\n",(0,s.jsxs)(n.p,{children:["Shifting right divides by ",(0,s.jsx)(n.code,{children:"2^n"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int num = 16;\n    printf("%d\\n", num >> 1);  // Output: 8\n    printf("%d\\n", num >> 2);  // Output: 4\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Use Case: Fast division without using ",(0,s.jsx)(n.code,{children:"/"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"checking-if-a-number-is-even-or-odd-using-",children:"Checking If a Number is Even or Odd (Using &)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int num = 7;\n    if (num & 1)\n        printf("Odd\\n");\n    else\n        printf("Even\\n");\n    return 0;\n}\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{}),(0,s.jsx)(n.p,{children:"Why? Even numbers end in 0 in binary, and odd numbers end in 1."})]})]})}function h(i={}){const{wrapper:n}={...(0,r.R)(),...i.components};return n?(0,s.jsx)(n,{...i,children:(0,s.jsx)(a,{...i})}):a(i)}},8453:(i,n,e)=>{e.d(n,{R:()=>d,x:()=>l});var t=e(6540);const s={},r=t.createContext(s);function d(i){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof i?i(n):{...n,...i}}),[n,i])}function l(i){let n;return n=i.disableParentContext?"function"==typeof i.components?i.components(s):i.components||s:d(i.components),t.createElement(r.Provider,{value:n},i.children)}}}]);