"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[4641],{750:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"code/languages/C/arrays","title":"Arrays in C","description":"This document covers Arrays in C.","source":"@site/docs/code/languages/C/arrays.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/arrays","permalink":"/docs/code/languages/C/arrays","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"demonkiller","lastUpdatedAt":1739832157000,"frontMatter":{"title":"Arrays in C","id":"arrays","sidebar_label":"Arrays"},"sidebar":"docs","previous":{"title":"Pointer to Functions","permalink":"/docs/code/languages/C/pointer_to_function"},"next":{"title":"Arrays & Pointers","permalink":"/docs/code/languages/C/arrays_and_pointers"}}');var a=i(4848),s=i(8453);const l={title:"Arrays in C",id:"arrays",sidebar_label:"Arrays"},t=void 0,d={},o=[{value:"Declaring and Initializing Arrays",id:"declaring-and-initializing-arrays",level:2},{value:"Declaring an Array",id:"declaring-an-array",level:3},{value:"Example",id:"example",level:4},{value:"Initializing an Array",id:"initializing-an-array",level:3},{value:"Accessing and Modifying Array Elements",id:"accessing-and-modifying-array-elements",level:2},{value:"Iterating Through an Array",id:"iterating-through-an-array",level:2},{value:"Using a for Loop",id:"using-a-for-loop",level:3},{value:"Using a while Loop",id:"using-a-while-loop",level:3},{value:"Multidimensional Arrays (2D Arrays)",id:"multidimensional-arrays-2d-arrays",level:2},{value:"Declaring and Initializing a 2D Array",id:"declaring-and-initializing-a-2d-array",level:3},{value:"Accessing 2D Array Elements",id:"accessing-2d-array-elements",level:3},{value:"Iterating Through a 2D Array",id:"iterating-through-a-2d-array",level:3},{value:"Common Pitfalls with Arrays",id:"common-pitfalls-with-arrays",level:2},{value:"Out-of-Bounds Access",id:"out-of-bounds-access",level:3},{value:"Solution",id:"solution",level:5},{value:"Uninitialized Arrays",id:"uninitialized-arrays",level:3},{value:"Solution",id:"solution-1",level:5}];function c(n){const e={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"This document covers Arrays in C."}),"\n",(0,a.jsx)(e.p,{children:"An array is a collection of elements of the same data type stored in contiguous memory locations. Arrays allow efficient data storage and access, making them fundamental to C programming."}),"\n",(0,a.jsx)(e.p,{children:"In this section, we will cover:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Declaring and initializing arrays."}),"\n",(0,a.jsx)(e.li,{children:"Accessing and modifying array elements."}),"\n",(0,a.jsx)(e.li,{children:"Iterating through arrays using loops."}),"\n",(0,a.jsx)(e.li,{children:"Multidimensional arrays (2D arrays and beyond)."}),"\n",(0,a.jsx)(e.li,{children:"Common pitfalls with arrays."}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"declaring-and-initializing-arrays",children:"Declaring and Initializing Arrays"}),"\n",(0,a.jsx)(e.h3,{id:"declaring-an-array",children:"Declaring an Array"}),"\n",(0,a.jsx)(e.p,{children:"Arrays in C are declared using the following syntax:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:"<datatype> arrayName[size];\n"})}),"\n",(0,a.jsx)(e.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:"int numbers[5];  // Declares an integer array of size 5\n"})}),"\n",(0,a.jsx)(e.h3,{id:"initializing-an-array",children:"Initializing an Array"}),"\n",(0,a.jsx)(e.p,{children:"Arrays can be initialized in different ways:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:"int numbers[5] = {1, 2, 3, 4, 5};  // Direct initialization\nint zeros[5] = {0};  // Initializes all elements to 0\nint implicitSize[] = {10, 20, 30};  // Compiler determines size (3 elements)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"accessing-and-modifying-array-elements",children:"Accessing and Modifying Array Elements"}),"\n",(0,a.jsx)(e.p,{children:"Each array element is accessed using an index, starting from 0."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int arr[3] = {10, 20, 30};\n    printf("First element: %d\\n", arr[0]);  // Accessing element\n    arr[1] = 50;  // Modifying element\n    printf("Updated second element: %d\\n", arr[1]);\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"arr[0]"})," refers to the first element."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"arr[1] = 50;"})," updates the second element."]}),"\n"]}),"\n"]})}),"\n",(0,a.jsx)(e.h2,{id:"iterating-through-an-array",children:"Iterating Through an Array"}),"\n",(0,a.jsx)(e.p,{children:"Arrays are commonly accessed using loops."}),"\n",(0,a.jsx)(e.h3,{id:"using-a-for-loop",children:"Using a for Loop"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int arr[] = {5, 10, 15, 20};\n    int size = sizeof(arr) / sizeof(arr[0]); // Determine size of array\n    for (int i = 0; i < size; i++) {\n        printf("Element %d: %d\\n", i, arr[i]);\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"sizeof(arr) / sizeof(arr[0])"})," calculates the number of elements."]})}),"\n",(0,a.jsx)(e.h3,{id:"using-a-while-loop",children:"Using a while Loop"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int arr[] = {2, 4, 6, 8};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int i = 0;\n    while (i < size) {\n        printf("Element %d: %d\\n", i, arr[i]);\n        i++;\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"multidimensional-arrays-2d-arrays",children:"Multidimensional Arrays (2D Arrays)"}),"\n",(0,a.jsx)(e.p,{children:"A multidimensional array is an array of arrays. The most common type is a 2D array, used for matrices."}),"\n",(0,a.jsx)(e.h3,{id:"declaring-and-initializing-a-2d-array",children:"Declaring and Initializing a 2D Array"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:"int matrix[2][3] = {{1, 2, 3}, {4, 5, 6}};\n"})}),"\n",(0,a.jsx)(e.h3,{id:"accessing-2d-array-elements",children:"Accessing 2D Array Elements"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int matrix[2][3] = {{1, 2, 3}, {4, 5, 6}};\n    printf("Element at row 1, column 2: %d\\n", matrix[1][2]);  // Output: 6\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"iterating-through-a-2d-array",children:"Iterating Through a 2D Array"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int matrix[2][3] = {{1, 2, 3}, {4, 5, 6}};\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf("%d ", matrix[i][j]);\n        }\n        printf("\\n");\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsx)(e.p,{children:"C is a row-major language. Outer loop iterates through rows. Inner loop iterates through columns."})}),"\n",(0,a.jsx)(e.h2,{id:"common-pitfalls-with-arrays",children:"Common Pitfalls with Arrays"}),"\n",(0,a.jsx)(e.h3,{id:"out-of-bounds-access",children:"Out-of-Bounds Access"}),"\n",(0,a.jsx)(e.p,{children:"Accessing an index beyond the allocated size leads to undefined behavior."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'int arr[3] = {1, 2, 3};\nprintf("Out-of-bounds access: %d\\n", arr[5]);  // Undefined behavior!\n'})}),"\n",(0,a.jsx)(e.h5,{id:"solution",children:"Solution"}),"\n",(0,a.jsx)(e.p,{children:"Always check array bounds before accessing elements."}),"\n",(0,a.jsx)(e.h3,{id:"uninitialized-arrays",children:"Uninitialized Arrays"}),"\n",(0,a.jsx)(e.p,{children:"Using uninitialized arrays leads to garbage values."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'int arr[5];  // Uninitialized array\nprintf("First element: %d\\n", arr[0]);  // Contains unpredictable data\n'})}),"\n",(0,a.jsx)(e.h5,{id:"solution-1",children:"Solution"}),"\n",(0,a.jsx)(e.p,{children:"Initialize arrays explicitly."})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>t});var r=i(6540);const a={},s=r.createContext(a);function l(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:l(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);