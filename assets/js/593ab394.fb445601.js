"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[6511],{8233:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"code/languages/C/storage_class","title":"Storage Classes","description":"This document covers storage classes in C.","source":"@site/docs/code/languages/C/storage_class.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/storage_class","permalink":"/docs/code/languages/C/storage_class","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Gaurang","lastUpdatedAt":1739855289000,"frontMatter":{"title":"Storage Classes","id":"storage_class","sidebar_label":"Storage Classes"},"sidebar":"docs","previous":{"title":"Types, Operators & Expressions","permalink":"/docs/code/languages/C/types_operators_expression"},"next":{"title":"Input & Output","permalink":"/docs/code/languages/C/io"}}');var n=s(4848),a=s(8453);const r={title:"Storage Classes",id:"storage_class",sidebar_label:"Storage Classes"},t=void 0,o={},c=[{value:"Types of Storage Classes in C",id:"types-of-storage-classes-in-c",level:2},{value:"The <code>auto</code> Storage Class (Default for Local Variables)",id:"the-auto-storage-class-default-for-local-variables",level:2},{value:"Example of auto Variables",id:"example-of-auto-variables",level:4},{value:"The <code>extern</code> Storage Class (Global Variable Access)",id:"the-extern-storage-class-global-variable-access",level:2},{value:"Example of extern Variables",id:"example-of-extern-variables",level:3},{value:"File 1: main.c",id:"file-1-mainc",level:4},{value:"File 2: global.c",id:"file-2-globalc",level:4},{value:"The <code>static</code> Storage Class (Preserving Values Across Calls)",id:"the-static-storage-class-preserving-values-across-calls",level:2},{value:"Static Local Variables (Persistent Between Function Calls)",id:"static-local-variables-persistent-between-function-calls",level:3},{value:"Static Global Variables (File Scope Only)",id:"static-global-variables-file-scope-only",level:3},{value:"The <code>register</code> Storage Class (Optimized for Speed)",id:"the-register-storage-class-optimized-for-speed",level:2},{value:"Example of <code>register</code> Variables",id:"example-of-register-variables",level:3},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Using extern Without a Definition",id:"using-extern-without-a-definition",level:3},{value:"Incorrect:",id:"incorrect",level:4},{value:"Solution:",id:"solution",level:4},{value:"Misusing static for Memory Optimization",id:"misusing-static-for-memory-optimization",level:3},{value:"Incorrect:",id:"incorrect-1",level:4},{value:"Solution:",id:"solution-1",level:4},{value:"Overusing register Variables",id:"overusing-register-variables",level:3},{value:"Incorrect:",id:"incorrect-2",level:4},{value:"Solution:",id:"solution-2",level:4}];function d(e){const i={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.p,{children:"This document covers storage classes in C."}),"\n",(0,n.jsx)(i.p,{children:"Storage classes in C define the scope (visibility), lifetime, and memory location of variables. Understanding storage classes is essential for writing efficient and modular C programs."}),"\n",(0,n.jsx)(i.p,{children:"Scope of a variable determines where it can be accessed in a program. A variable can have block scope (local variables), file scope (global/static variables), or external linkage (extern variables used across multiple files)."}),"\n",(0,n.jsx)(i.p,{children:"In this section, we will cover:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Types of Storage Classes (auto, extern, static, register)."}),"\n",(0,n.jsx)(i.li,{children:"Scope and lifetime of variables."}),"\n",(0,n.jsx)(i.li,{children:"Practical use cases of storage classes."}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"types-of-storage-classes-in-c",children:"Types of Storage Classes in C"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:(0,n.jsx)(i.strong,{children:"Storage Class"})}),(0,n.jsx)(i.th,{children:(0,n.jsx)(i.strong,{children:"Scope"})}),(0,n.jsx)(i.th,{children:(0,n.jsx)(i.strong,{children:"Lifetime"})}),(0,n.jsx)(i.th,{children:(0,n.jsx)(i.strong,{children:"Memory Location"})}),(0,n.jsx)(i.th,{children:(0,n.jsx)(i.strong,{children:"Default Initial Value"})})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"auto"})}),(0,n.jsx)(i.td,{children:"Local"}),(0,n.jsx)(i.td,{children:"Block execution"}),(0,n.jsx)(i.td,{children:"Stack"}),(0,n.jsx)(i.td,{children:"Garbage (Undefined)"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"extern"})}),(0,n.jsx)(i.td,{children:"Global"}),(0,n.jsx)(i.td,{children:"Entire program"}),(0,n.jsx)(i.td,{children:"Global memory"}),(0,n.jsx)(i.td,{children:"Zero (if uninitialized)"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.code,{children:"static"})," (local)"]}),(0,n.jsx)(i.td,{children:"Local"}),(0,n.jsx)(i.td,{children:"Program lifetime"}),(0,n.jsx)(i.td,{children:"Global memory"}),(0,n.jsx)(i.td,{children:"Zero (if uninitialized)"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.code,{children:"static"})," (global)"]}),(0,n.jsx)(i.td,{children:"File scope"}),(0,n.jsx)(i.td,{children:"Program lifetime"}),(0,n.jsx)(i.td,{children:"Global memory"}),(0,n.jsx)(i.td,{children:"Zero (if uninitialized)"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"register"})}),(0,n.jsx)(i.td,{children:"Local"}),(0,n.jsx)(i.td,{children:"Block execution"}),(0,n.jsx)(i.td,{children:"CPU registers (if available)"}),(0,n.jsx)(i.td,{children:"Garbage (Undefined)"})]})]})]}),"\n",(0,n.jsxs)(i.h2,{id:"the-auto-storage-class-default-for-local-variables",children:["The ",(0,n.jsx)(i.code,{children:"auto"})," Storage Class (Default for Local Variables)"]}),"\n",(0,n.jsx)(i.p,{children:"The auto storage class is the default for local variables."}),"\n",(0,n.jsx)(i.h4,{id:"example-of-auto-variables",children:"Example of auto Variables"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\nvoid function() {\n    auto int x = 10;  // Default behavior (same as `int x = 10;`)\n    printf("x = %d\\n", x);\n}\nint main() {\n    function();\n    return 0;\n}\n'})}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsx)(i.p,{children:"auto variables exist only inside the block they are defined in. They are stored in the stack memory. Their value is lost once the function exits."})}),"\n",(0,n.jsxs)(i.h2,{id:"the-extern-storage-class-global-variable-access",children:["The ",(0,n.jsx)(i.code,{children:"extern"})," Storage Class (Global Variable Access)"]}),"\n",(0,n.jsx)(i.p,{children:"The extern storage class extends the visibility of global variables across multiple files."}),"\n",(0,n.jsx)(i.h3,{id:"example-of-extern-variables",children:"Example of extern Variables"}),"\n",(0,n.jsx)(i.h4,{id:"file-1-mainc",children:"File 1: main.c"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\nextern int globalVar;  // Declared but not defined\nint main() {\n    printf("Global variable: %d\\n", globalVar);\n    return 0;\n}\n'})}),"\n",(0,n.jsx)(i.h4,{id:"file-2-globalc",children:"File 2: global.c"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-c",children:"#include <stdio.h>\nint globalVar = 100;  // Defined here\n"})}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"extern"})," does not allocate memory, it only declares an external variable. Used to share global variables across multiple files. The actual definition must be in another file."]})}),"\n",(0,n.jsxs)(i.h2,{id:"the-static-storage-class-preserving-values-across-calls",children:["The ",(0,n.jsx)(i.code,{children:"static"})," Storage Class (Preserving Values Across Calls)"]}),"\n",(0,n.jsx)(i.h3,{id:"static-local-variables-persistent-between-function-calls",children:"Static Local Variables (Persistent Between Function Calls)"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\nvoid counter() {\n    static int count = 0;  // Retains its value between function calls\n    count++;\n    printf("Counter: %d\\n", count);\n}\nint main() {\n    counter();\n    counter();\n    counter();\n    return 0;\n}\n'})}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"A static local variable keeps its value between function calls."}),"\n",(0,n.jsx)(i.li,{children:"Stored in global memory instead of the stack."}),"\n"]})}),"\n",(0,n.jsx)(i.h3,{id:"static-global-variables-file-scope-only",children:"Static Global Variables (File Scope Only)"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-c",children:"static int globalStatic = 100;  // Accessible only in this file\n"})}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"A static global variable cannot be accessed outside its file."}),"\n",(0,n.jsx)(i.li,{children:"Prevents namespace conflicts in large programs."}),"\n"]})}),"\n",(0,n.jsxs)(i.h2,{id:"the-register-storage-class-optimized-for-speed",children:["The ",(0,n.jsx)(i.code,{children:"register"})," Storage Class (Optimized for Speed)"]}),"\n",(0,n.jsxs)(i.h3,{id:"example-of-register-variables",children:["Example of ",(0,n.jsx)(i.code,{children:"register"})," Variables"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    register int i = 5;  // Hints compiler to store in a CPU register\n    printf("i = %d\\n", i);\n    return 0;\n}\n'})}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"register"})," variables are stored in CPU registers (if available)."]}),"\n",(0,n.jsx)(i.li,{children:"Useful for loop counters and frequently used variables."}),"\n",(0,n.jsx)(i.li,{children:"Cannot take the address (&i is invalid)."}),"\n"]})}),"\n",(0,n.jsx)(i.h2,{id:"common-pitfalls-and-best-practices",children:"Common Pitfalls and Best Practices"}),"\n",(0,n.jsx)(i.h3,{id:"using-extern-without-a-definition",children:"Using extern Without a Definition"}),"\n",(0,n.jsx)(i.h4,{id:"incorrect",children:"Incorrect:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-c",children:'extern int value;  // No definition exists\nprintf("%d", value);  // Undefined behavior!\n'})}),"\n",(0,n.jsx)(i.h4,{id:"solution",children:"Solution:"}),"\n",(0,n.jsx)(i.p,{children:"Ensure an actual definition exists in another file."}),"\n",(0,n.jsx)(i.h3,{id:"misusing-static-for-memory-optimization",children:"Misusing static for Memory Optimization"}),"\n",(0,n.jsx)(i.h4,{id:"incorrect-1",children:"Incorrect:"}),"\n",(0,n.jsx)(i.p,{children:"Declaring large arrays as static in a recursive function can lead to high memory usage."}),"\n",(0,n.jsx)(i.h4,{id:"solution-1",children:"Solution:"}),"\n",(0,n.jsx)(i.p,{children:"Use dynamic memory (malloc) if needed."}),"\n",(0,n.jsx)(i.h3,{id:"overusing-register-variables",children:"Overusing register Variables"}),"\n",(0,n.jsx)(i.h4,{id:"incorrect-2",children:"Incorrect:"}),"\n",(0,n.jsx)(i.p,{children:"Using register for large variables (e.g., arrays) can be inefficient."}),"\n",(0,n.jsx)(i.h4,{id:"solution-2",children:"Solution:"}),"\n",(0,n.jsx)(i.p,{children:"Only use register for small, frequently accessed variables."})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,i,s)=>{s.d(i,{R:()=>r,x:()=>t});var l=s(6540);const n={},a=l.createContext(n);function r(e){const i=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),l.createElement(a.Provider,{value:i},e.children)}}}]);