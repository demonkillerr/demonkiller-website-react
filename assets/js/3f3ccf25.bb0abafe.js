"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[4570],{8627:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"code/languages/C/control_flow","title":"Control Flow","description":"This document covers Control Flow in C.","source":"@site/docs/code/languages/C/control-flow.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/control_flow","permalink":"/docs/code/languages/C/control_flow","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"demonkiller","lastUpdatedAt":1739819296000,"frontMatter":{"title":"Control Flow","id":"control_flow","sidebar_label":"Control Flow"},"sidebar":"docs","previous":{"title":"Input & Output","permalink":"/docs/code/languages/C/io"},"next":{"title":"Functions","permalink":"/docs/code/languages/C/functions"}}');var o=i(4848),l=i(8453);const s={title:"Control Flow",id:"control_flow",sidebar_label:"Control Flow"},r=void 0,a={},d=[{value:"Conditional Statements",id:"conditional-statements",level:2},{value:"if-else Statement",id:"if-else-statement",level:3},{value:"Example",id:"example",level:4},{value:"Switch Case Statement",id:"switch-case-statement",level:3},{value:"Example",id:"example-1",level:4},{value:"Loops in C",id:"loops-in-c",level:2},{value:"For Loop",id:"for-loop",level:3},{value:"Example",id:"example-2",level:4},{value:"While Loop",id:"while-loop",level:3},{value:"Example:",id:"example-3",level:4},{value:"Do-While Loop",id:"do-while-loop",level:3},{value:"Example:",id:"example-4",level:4},{value:"Break and Continue Statements",id:"break-and-continue-statements",level:3},{value:"Example using <code>break</code>",id:"example-using-break",level:4},{value:"Example using continue",id:"example-using-continue",level:4}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"This document covers Control Flow in C."}),"\n",(0,o.jsx)(n.p,{children:"Control flow determines the order in which statements are executed in a C program. C provides several control flow structures, including conditional statements and loops, to control the execution of code based on conditions or repetitions."}),"\n",(0,o.jsx)(n.h2,{id:"conditional-statements",children:"Conditional Statements"}),"\n",(0,o.jsx)(n.p,{children:"Conditional statements allow a program to make decisions and execute different code blocks based on conditions."}),"\n",(0,o.jsx)(n.h3,{id:"if-else-statement",children:"if-else Statement"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"if"})," statement executes a block of code only if a condition is true. The ",(0,o.jsx)(n.code,{children:"else"})," statement executes if the if condition is false. If there a multiple conditions to be checked, then ",(0,o.jsx)(n.code,{children:"else-if"})," can be used."]}),"\n",(0,o.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int num;\n    printf("Enter a number: ");\n    scanf("%d", &num);\n\n    if (num > 0) {\n        printf("The number is positive.\\n");\n    } else if (num < 0) {\n        printf("The number is negative.\\n");\n    } else {\n        printf("The number is zero.\\n");\n    }\n    return 0;\n}\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"The program checks if the number is positive, negative, or zero."})}),"\n",(0,o.jsx)(n.h3,{id:"switch-case-statement",children:"Switch Case Statement"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"switch"})," statement is used to evaluate a single expression and execute different blocks of code based on its value. Each case must end with a ",(0,o.jsx)(n.code,{children:"break"}),"; statement to prevent fall-through."]}),"\n",(0,o.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int day;\n    printf("Enter a number (1-7) for a day of the week: ");\n    scanf("%d", &day);\n\n    switch (day) {\n        case 1: printf("Monday\\n"); break;\n        case 2: printf("Tuesday\\n"); break;\n        case 3: printf("Wednesday\\n"); break;\n        case 4: printf("Thursday\\n"); break;\n        case 5: printf("Friday\\n"); break;\n        case 6: printf("Saturday\\n"); break;\n        case 7: printf("Sunday\\n"); break;\n        default: printf("Invalid input!\\n");\n    }\n    return 0;\n}\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"The program takes an integer input (1-7) and prints the corresponding weekday."})}),"\n",(0,o.jsx)(n.h2,{id:"loops-in-c",children:"Loops in C"}),"\n",(0,o.jsx)(n.p,{children:"Loops allow repeating a block of code multiple times until a condition is met."}),"\n",(0,o.jsx)(n.h3,{id:"for-loop",children:"For Loop"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"for"})," loop is used when the number of iterations is known beforehand."]}),"\n",(0,o.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    for (int i = 1; i <= 5; i++) {\n        printf("Iteration %d\\n", i);\n    }\n    return 0;\n}\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"The loop runs 5 times, printing the iteration number each time."})}),"\n",(0,o.jsx)(n.h3,{id:"while-loop",children:"While Loop"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"while"})," loop executes as long as the condition remains true."]}),"\n",(0,o.jsx)(n.h4,{id:"example-3",children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int count = 1;\n    while (count <= 5) {\n        printf("Count: %d\\n", count);\n        count++;\n    }\n    return 0;\n}\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"The loop increments count until it reaches 5."})}),"\n",(0,o.jsx)(n.h3,{id:"do-while-loop",children:"Do-While Loop"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"do-while"})," loop guarantees at least one execution before checking the condition."]}),"\n",(0,o.jsx)(n.h4,{id:"example-4",children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int num;\n    do {\n        printf("Enter a positive number: ");\n        scanf("%d", &num);\n    } while (num <= 0);\n\n    printf("You entered: %d\\n", num);\n    return 0;\n}\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"This loop ensures the user must enter a positive number before proceeding."})}),"\n",(0,o.jsx)(n.h3,{id:"break-and-continue-statements",children:"Break and Continue Statements"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"The break statement is used to exit a loop prematurely when a condition is met."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"The continue statement skips the rest of the current iteration and moves to the next."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.h4,{id:"example-using-break",children:["Example using ",(0,o.jsx)(n.code,{children:"break"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        if (i == 5) {\n            break; // Stops the loop when i reaches 5\n        }\n        printf("%d ", i);\n    }\n    return 0;\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"example-using-continue",children:"Example using continue"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        if (i == 5) {\n            continue; // Skips printing 5\n        }\n        printf("%d ", i);\n    }\n    return 0;\n}\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"break"})," stops the loop completely when i == 5."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"continue"})," skips i == 5 but continues the loop."]}),"\n"]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(6540);const o={},l=t.createContext(o);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);