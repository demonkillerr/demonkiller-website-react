"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[3807],{831:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"code/languages/C/io","title":"Input and Output","description":"This document covers Input and Output in C.","source":"@site/docs/code/languages/C/io.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/io","permalink":"/docs/code/languages/C/io","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Gaurang","lastUpdatedAt":1739855289000,"frontMatter":{"title":"Input and Output","id":"io","sidebar_label":"Input & Output"},"sidebar":"docs","previous":{"title":"Storage Classes","permalink":"/docs/code/languages/C/storage_class"},"next":{"title":"Control Flow","permalink":"/docs/code/languages/C/control_flow"}}');var t=s(4848),d=s(8453);const r={title:"Input and Output",id:"io",sidebar_label:"Input & Output"},c=void 0,l={},a=[{value:"Output using <code>printf()</code>",id:"output-using-printf",level:2},{value:"Syntax",id:"syntax",level:4},{value:"Example",id:"example",level:4},{value:"Input using <code>scanf()</code>",id:"input-using-scanf",level:2},{value:"Syntax",id:"syntax-1",level:4},{value:"Example:",id:"example-1",level:4},{value:"Common Format Specifiers",id:"common-format-specifiers",level:2},{value:"Example:",id:"example-2",level:4},{value:"Escape Sequences",id:"escape-sequences",level:2},{value:"Example:",id:"example-3",level:4},{value:"Character Inptu &amp; Output using <code>getchar()</code> &amp; <code>putchar()</code>",id:"character-inptu--output-using-getchar--putchar",level:2},{value:"Example:",id:"example-4",level:4},{value:"String Input and Output using <code>fgets()</code> and <code>puts()</code>",id:"string-input-and-output-using-fgets-and-puts",level:2},{value:"Example:",id:"example-5",level:4}];function o(e){const n={admonition:"admonition",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This document covers Input and Output in C."}),"\n",(0,t.jsx)(n.p,{children:"Input and output (I/O) operations are essential for interacting with users and handling data in C programs. The C standard library provides functions like printf() for output and scanf() for input. Additionally, escape sequences help in formatting output effectively."}),"\n",(0,t.jsxs)(n.h2,{id:"output-using-printf",children:["Output using ",(0,t.jsx)(n.code,{children:"printf()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"printf()"})," function displays formatted output on the screen. It supports various ",(0,t.jsx)(n.strong,{children:"format specifiers"})," to print different types of data."]}),"\n",(0,t.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'printf("Some text is: %fs \\n", var_name); \n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"fs"})," is the format specifier depending of the type of the variable."]})}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int age = 25;\n    printf("Your age is: %d\\n", age);\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:"%d"})," is a ",(0,t.jsx)(n.strong,{children:"format specifier"})," that tells ",(0,t.jsx)(n.code,{children:"printf()"})," to print an integer value."]})}),"\n",(0,t.jsxs)(n.h2,{id:"input-using-scanf",children:["Input using ",(0,t.jsx)(n.code,{children:"scanf()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"scanf()"})," function is used to take user input. The ",(0,t.jsx)(n.code,{children:"&"})," (address-of) operator is required when storing input in variables."]}),"\n",(0,t.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'scanf("%fs", var_name); //where fs is the format specifier\n'})}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int age;\n    printf("Enter your age: ");\n    scanf("%d", &age);\n    printf("You entered: %d\\n", age);\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:"%d"})," is used for reading an integer input from the user."]})}),"\n",(0,t.jsx)(n.h2,{id:"common-format-specifiers",children:"Common Format Specifiers"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Specifier"}),(0,t.jsx)(n.th,{children:"Data Type"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"%d"})}),(0,t.jsxs)(n.td,{children:["Integer (",(0,t.jsx)(n.code,{children:"int"}),")"]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'printf("%d", 10);'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"%f"})}),(0,t.jsxs)(n.td,{children:["Floating-point (",(0,t.jsx)(n.code,{children:"float"}),")"]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'printf("%.2f", 3.14);'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"%c"})}),(0,t.jsxs)(n.td,{children:["Character (",(0,t.jsx)(n.code,{children:"char"}),")"]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"printf(\"%c\", 'A');"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"%s"})}),(0,t.jsxs)(n.td,{children:["String (",(0,t.jsx)(n.code,{children:"char[]"}),")"]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'printf("%s", "Hello");'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"%lf"})}),(0,t.jsxs)(n.td,{children:["Double (",(0,t.jsx)(n.code,{children:"double"}),")"]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'printf("%lf", 3.14159);'})})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'float pi = 3.14159;\nprintf("Value of Pi: %.2f\\n", pi);\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:"%.2f"})," ensures that only two decimal places of pi are printed."]})}),"\n",(0,t.jsx)(n.h2,{id:"escape-sequences",children:"Escape Sequences"}),"\n",(0,t.jsx)(n.p,{children:"Escape sequences allow special characters to be included in strings while maintaining readability and proper formatting."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Escape Sequence"}),(0,t.jsx)(n.th,{children:"Meaning"}),(0,t.jsx)(n.th,{children:"Example Output"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"\\n"})}),(0,t.jsx)(n.td,{children:"Newline (moves to the next line)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Hello,\\nWorld!"})," \u2192 ",(0,t.jsx)(n.code,{children:"Hello, <br> World!"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"\\t"})}),(0,t.jsx)(n.td,{children:"Tab space (adds horizontal spacing)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Tab\\tSpace"})," \u2192 ",(0,t.jsx)(n.code,{children:"Tab    Space"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'\\"'})}),(0,t.jsx)(n.td,{children:"Double quote (use inside a string)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:'\\"Hello\\"'})," \u2192 ",(0,t.jsx)(n.code,{children:'"Hello"'})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"\\\\"})}),(0,t.jsxs)(n.td,{children:["Backslash (prints ",(0,t.jsx)(n.code,{children:"\\"})," character)"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"\\\\path\\\\to\\\\file"})," \u2192 ",(0,t.jsx)(n.code,{children:"\\path\\to\\file"})]})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"example-3",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'printf("Hello,\\nWorld!\\n"); // Prints on two lines\nprintf("Tab\\tSpace\\n"); // Adds a tab space\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"\\n"})," escape sequence moves the cursor to a new line."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"\\t"})," escape sequence inserts a tab space for indentation."]}),"\n"]}),"\n"]})}),"\n",(0,t.jsxs)(n.h2,{id:"character-inptu--output-using-getchar--putchar",children:["Character Inptu & Output using ",(0,t.jsx)(n.code,{children:"getchar()"})," & ",(0,t.jsx)(n.code,{children:"putchar()"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getchar()"})," is used to read a single character from standard input (keyboard)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"putchar()"})," is used to display a single character on the screen."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-4",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    char ch;\n    printf("Enter a character: ");\n    ch = getchar(); // Reads a single character\n    printf("You entered: ");\n    putchar(ch); // Prints the character\n    printf("\\n");\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"getchar()"})," waits for the user to input a character and stores it in ch."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"putchar()"})," prints the character stored in ch."]}),"\n"]}),"\n"]})}),"\n",(0,t.jsxs)(n.h2,{id:"string-input-and-output-using-fgets-and-puts",children:["String Input and Output using ",(0,t.jsx)(n.code,{children:"fgets()"})," and ",(0,t.jsx)(n.code,{children:"puts()"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fgets()"})," is used to read a line of text (string) from standard input."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"puts()"})," is used to print a string with an automatic newline at the end."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-5",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    char name[50];\n    printf("Enter your name: ");\n    fgets(name, sizeof(name), stdin); // Reads a line of text\n    printf("Hello, ");\n    puts(name); // Prints the string with a newline\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"fgets()"})," reads a full line of input and prevents buffer overflow."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"puts()"})," prints a string and automatically adds a newline."]}),"\n"]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(6540);const t={},d=i.createContext(t);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);