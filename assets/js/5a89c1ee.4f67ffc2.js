"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[1098],{2406:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"code/languages/C/preprocessor","title":"C Preprocessor Directives","description":"This document covers preprocessor directives.","source":"@site/docs/code/languages/C/preprocessor.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/preprocessor","permalink":"/docs/code/languages/C/preprocessor","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"demonkiller","lastUpdatedAt":1739853715000,"frontMatter":{"title":"C Preprocessor Directives","id":"preprocessor","sidebar_label":"Preprocessors Directives"},"sidebar":"docs","previous":{"title":"Setup & First Program","permalink":"/docs/code/languages/C/setup_and_first_program"},"next":{"title":"Types, Operators & Expressions","permalink":"/docs/code/languages/C/types_operators_expression"}}');var d=i(4848),r=i(8453);const o={title:"C Preprocessor Directives",id:"preprocessor",sidebar_label:"Preprocessors Directives"},c=void 0,l={},a=[{value:"Macro Definitions (<code>#define</code> and <code>#undef</code>)",id:"macro-definitions-define-and-undef",level:2},{value:"Defining Constants",id:"defining-constants",level:3},{value:"Undefining a Macro (#undef)",id:"undefining-a-macro-undef",level:3},{value:"File Inclusion (#include)",id:"file-inclusion-include",level:2},{value:"Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)",id:"conditional-compilation-ifdef-ifndef-endif",level:2},{value:"Using #ifdef and #ifndef",id:"using-ifdef-and-ifndef",level:3},{value:"Preventing Multiple Inclusions (#ifndef)",id:"preventing-multiple-inclusions-ifndef",level:3},{value:"The <code>#pragma</code> Directive",id:"the-pragma-directive",level:2},{value:"Disabling Warnings (#pragma warning)",id:"disabling-warnings-pragma-warning",level:3},{value:"Optimization (#pragma optimize)",id:"optimization-pragma-optimize",level:3}];function t(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.p,{children:"This document covers preprocessor directives."}),"\n",(0,d.jsx)(n.p,{children:"The C Preprocessor is a tool that processes the source code before compilation. Preprocessor directives start with # and do not end with a semicolon (;)."}),"\n",(0,d.jsx)(n.p,{children:"In this section, we will cover:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Macro definitions (#define)"}),"\n",(0,d.jsx)(n.li,{children:"Including files (#include)"}),"\n",(0,d.jsx)(n.li,{children:"Conditional Compilation (#ifdef, #ifndef, #endif)"}),"\n",(0,d.jsx)(n.li,{children:"Optimization and compiler-specific directives (#pragma)"}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"macro-definitions-define-and-undef",children:["Macro Definitions (",(0,d.jsx)(n.code,{children:"#define"})," and ",(0,d.jsx)(n.code,{children:"#undef"}),")"]}),"\n",(0,d.jsx)(n.h3,{id:"defining-constants",children:"Defining Constants"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"#define"})," directive is used to define constants and macros."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:"#define PI 3.14159\n#define SQUARE(x) ((x) * (x))\n"})}),"\n",(0,d.jsx)(n.admonition,{type:"info",children:(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"PI"})," is replaced with 3.14159 during preprocessing."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"SQUARE(x)"})," is an inline macro function."]}),"\n"]}),"\n"]})}),"\n",(0,d.jsx)(n.h3,{id:"undefining-a-macro-undef",children:"Undefining a Macro (#undef)"}),"\n",(0,d.jsx)(n.p,{children:"To remove a macro definition, use #undef:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:"#undef PI\n"})}),"\n",(0,d.jsx)(n.h2,{id:"file-inclusion-include",children:"File Inclusion (#include)"}),"\n",(0,d.jsx)(n.p,{children:"The #include directive is used to include header files."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>  // Standard Library Header\n#include "myheader.h"  // User-defined Header\n'})}),"\n",(0,d.jsx)(n.admonition,{type:"info",children:(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Angle brackets (",(0,d.jsx)(n.code,{children:"<>"}),") search in standard system directories."]}),"\n",(0,d.jsxs)(n.li,{children:["Quotes (",(0,d.jsx)(n.code,{children:'""'}),") search in the current directory first."]}),"\n"]})}),"\n",(0,d.jsxs)(n.h2,{id:"conditional-compilation-ifdef-ifndef-endif",children:["Conditional Compilation (",(0,d.jsx)(n.code,{children:"#ifdef"}),", ",(0,d.jsx)(n.code,{children:"#ifndef"}),", ",(0,d.jsx)(n.code,{children:"#endif"}),")"]}),"\n",(0,d.jsx)(n.p,{children:"Conditional compilation allows compiling specific parts of code based on macro definitions."}),"\n",(0,d.jsx)(n.h3,{id:"using-ifdef-and-ifndef",children:"Using #ifdef and #ifndef"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:'#define DEBUG\n#ifdef DEBUG\n    #define LOG(x) printf("Debug: %s\\n", x)\n#else\n    #define LOG(x)\n#endif\n'})}),"\n",(0,d.jsx)(n.admonition,{type:"info",children:(0,d.jsx)(n.p,{children:"If DEBUG is defined, LOG(x) prints a debug message. Otherwise, LOG(x) does nothing."})}),"\n",(0,d.jsx)(n.h3,{id:"preventing-multiple-inclusions-ifndef",children:"Preventing Multiple Inclusions (#ifndef)"}),"\n",(0,d.jsx)(n.p,{children:"Header files should be wrapped with an inclusion guard:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:"#ifndef MYHEADER_H\n#define MYHEADER_H\n\nvoid myFunction();\n\n#endif // MYHEADER_H\n"})}),"\n",(0,d.jsx)(n.admonition,{type:"info",children:(0,d.jsx)(n.p,{children:"Prevents multiple inclusion of the same file."})}),"\n",(0,d.jsxs)(n.h2,{id:"the-pragma-directive",children:["The ",(0,d.jsx)(n.code,{children:"#pragma"})," Directive"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"#pragma"})," provides compiler-specific instructions and optimizations."]}),"\n",(0,d.jsx)(n.h3,{id:"disabling-warnings-pragma-warning",children:"Disabling Warnings (#pragma warning)"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:"#pragma warning(disable: 4996)  // Disable specific warnings (MSVC only)\n"})}),"\n",(0,d.jsx)(n.h3,{id:"optimization-pragma-optimize",children:"Optimization (#pragma optimize)"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:'#pragma optimize("g", off)  // Disable global optimizations\n'})}),"\n",(0,d.jsx)(n.p,{children:"This preprocessor directive is usefull for OpenMP-based parallel programming."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(t,{...e})}):t(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(6540);const d={},r=s.createContext(d);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);