"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[6086],{8792:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"code/languages/C/arrays_of_pointers","title":"Arrays of Pointers","description":"This document covers Array of Pointers.","source":"@site/docs/code/languages/C/array_of_pointers.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/arrays_of_pointers","permalink":"/docs/code/languages/C/arrays_of_pointers","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"demonkiller","lastUpdatedAt":1739841182000,"frontMatter":{"title":"Arrays of Pointers","id":"arrays_of_pointers","sidebar_label":"Arrays of Pointers"},"sidebar":"docs","previous":{"title":"Arrays & Pointers","permalink":"/docs/code/languages/C/arrays_and_pointers"},"next":{"title":"Dynamic Memory","permalink":"/docs/code/languages/C/dynamic_mem_alloc"}}');var a=r(4848),s=r(8453);const o={title:"Arrays of Pointers",id:"arrays_of_pointers",sidebar_label:"Arrays of Pointers"},t=void 0,l={},d=[{value:"Declaring and Initializing an Array of Pointers",id:"declaring-and-initializing-an-array-of-pointers",level:2},{value:"Declaring an Array of Pointers",id:"declaring-an-array-of-pointers",level:3},{value:"Example",id:"example",level:4},{value:"Initializing an Array of Pointers",id:"initializing-an-array-of-pointers",level:3},{value:"Pointer Arrays vs. Arrays of Pointers",id:"pointer-arrays-vs-arrays-of-pointers",level:2},{value:"Example of a Pointer to an Array",id:"example-of-a-pointer-to-an-array",level:4},{value:"Using an Array of Pointers for Strings",id:"using-an-array-of-pointers-for-strings",level:2},{value:"Using an Array of Pointers for a Dynamic 2D Array",id:"using-an-array-of-pointers-for-a-dynamic-2d-array",level:2},{value:"Allocating a 2D Array Dynamically",id:"allocating-a-2d-array-dynamically",level:3},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Dangling Pointers",id:"dangling-pointers",level:3},{value:"Solution:",id:"solution",level:4},{value:"Out-of-Bounds Access",id:"out-of-bounds-access",level:3},{value:"Solution:",id:"solution-1",level:4},{value:"Forgetting to Free Dynamically Allocated Memory",id:"forgetting-to-free-dynamically-allocated-memory",level:3},{value:"Solution:",id:"solution-2",level:4}];function c(n){const e={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"This document covers Array of Pointers."}),"\n",(0,a.jsx)(e.p,{children:"An Array of Pointers is an array where each element is a pointer. This allows storing multiple memory addresses instead of actual values, making it useful for managing strings, dynamic arrays, and function pointers."}),"\n",(0,a.jsx)(e.p,{children:"In this section, we will cover:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"What an array of pointers is."}),"\n",(0,a.jsx)(e.li,{children:"How to declare and initialize an array of pointers."}),"\n",(0,a.jsx)(e.li,{children:"Difference between pointer arrays and arrays of pointers."}),"\n",(0,a.jsx)(e.li,{children:"Practical use cases: Strings, Dynamic 2D Arrays."}),"\n",(0,a.jsx)(e.li,{children:"Common pitfalls and best practices."}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"declaring-and-initializing-an-array-of-pointers",children:"Declaring and Initializing an Array of Pointers"}),"\n",(0,a.jsx)(e.h3,{id:"declaring-an-array-of-pointers",children:"Declaring an Array of Pointers"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:"<datatype> *arrayName[size];\n"})}),"\n",(0,a.jsx)(e.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:"int *arr[3];  // Declares an array of 3 integer pointers\n"})}),"\n",(0,a.jsx)(e.h3,{id:"initializing-an-array-of-pointers",children:"Initializing an Array of Pointers"}),"\n",(0,a.jsx)(e.p,{children:"Each element of an array of pointers stores a memory address."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    int a = 10, b = 20, c = 30;\n    int *arr[3] = {&a, &b, &c};  // Array of pointers storing addresses\n    \n    for (int i = 0; i < 3; i++) {\n        printf("Value at arr[%d]: %d\\n", i, *arr[i]);\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsxs)(e.admonition,{type:"info",children:[(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"arr[0]"})," stores ",(0,a.jsx)(e.code,{children:"&a"}),", ",(0,a.jsx)(e.code,{children:"arr[1]"})," stores ",(0,a.jsx)(e.code,{children:"&b"}),", and so on."]}),(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"*arr[i]"})," accesses the actual values (",(0,a.jsx)(e.code,{children:"10, 20, 30"}),")."]})]}),"\n",(0,a.jsx)(e.h2,{id:"pointer-arrays-vs-arrays-of-pointers",children:"Pointer Arrays vs. Arrays of Pointers"}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:(0,a.jsx)(e.strong,{children:"Concept"})}),(0,a.jsx)(e.th,{children:(0,a.jsx)(e.strong,{children:"Definition"})}),(0,a.jsx)(e.th,{children:(0,a.jsx)(e.strong,{children:"Example"})})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.strong,{children:"Pointer Array"})}),(0,a.jsx)(e.td,{children:"A single pointer that points to an array."}),(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"int (*ptr)[5];"})})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.strong,{children:"Array of Pointers"})}),(0,a.jsx)(e.td,{children:"An array where each element is a pointer."}),(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"int *arr[5];"})})]})]})]}),"\n",(0,a.jsx)(e.h4,{id:"example-of-a-pointer-to-an-array",children:"Example of a Pointer to an Array"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'int arr[5] = {1, 2, 3, 4, 5};\nint (*ptr)[5] = &arr;  // Pointer to the entire array\nprintf("First element: %d\\n", (*ptr)[0]);\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsx)(e.p,{children:"ptr points to the entire array, not individual elements."})}),"\n",(0,a.jsx)(e.h2,{id:"using-an-array-of-pointers-for-strings",children:"Using an Array of Pointers for Strings"}),"\n",(0,a.jsx)(e.p,{children:"An array of pointers is commonly used to store multiple strings efficiently."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\nint main() {\n    char *names[] = {"Alice", "Bob", "Charlie"};  // Array of pointers to strings\n    \n    for (int i = 0; i < 3; i++) {\n        printf("Name[%d]: %s\\n", i, names[i]);\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsx)(e.p,{children:"Each element of names[] stores a pointer to a string. Strings are not copied, making this memory efficient."})}),"\n",(0,a.jsx)(e.h2,{id:"using-an-array-of-pointers-for-a-dynamic-2d-array",children:"Using an Array of Pointers for a Dynamic 2D Array"}),"\n",(0,a.jsx)(e.p,{children:"Unlike fixed-size 2D arrays, dynamic 2D arrays allow flexible memory management."}),"\n",(0,a.jsx)(e.h3,{id:"allocating-a-2d-array-dynamically",children:"Allocating a 2D Array Dynamically"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int rows = 3, cols = 3;\n    int **matrix = (int **)malloc(rows * sizeof(int *));\n    \n    for (int i = 0; i < rows; i++) {\n        matrix[i] = (int *)malloc(cols * sizeof(int));\n    }\n    \n    // Assigning values\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            matrix[i][j] = i * cols + j + 1;\n            printf("%d ", matrix[i][j]);\n        }\n        printf("\\n");\n    }\n    \n    // Free memory\n    for (int i = 0; i < rows; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"matrix"})," is an array of pointers, each pointing to a dynamically allocated row. This method allows creating non-square matrices dynamically. You must free memory after usage to avoid leaks."]})}),"\n",(0,a.jsx)(e.h2,{id:"common-pitfalls-and-best-practices",children:"Common Pitfalls and Best Practices"}),"\n",(0,a.jsx)(e.h3,{id:"dangling-pointers",children:"Dangling Pointers"}),"\n",(0,a.jsx)(e.p,{children:"If a pointer in an array is freed without updating the reference, it leads to a dangling pointer."}),"\n",(0,a.jsx)(e.h4,{id:"solution",children:"Solution:"}),"\n",(0,a.jsx)(e.p,{children:"Set the pointer to NULL after freeing."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:"free(arr[0]);\narr[0] = NULL;  // Prevents accessing freed memory\n"})}),"\n",(0,a.jsx)(e.h3,{id:"out-of-bounds-access",children:"Out-of-Bounds Access"}),"\n",(0,a.jsx)(e.p,{children:"Accessing an index beyond the allocated size results in undefined behavior."}),"\n",(0,a.jsx)(e.h4,{id:"solution-1",children:"Solution:"}),"\n",(0,a.jsx)(e.p,{children:"Always check array bounds."}),"\n",(0,a.jsx)(e.h3,{id:"forgetting-to-free-dynamically-allocated-memory",children:"Forgetting to Free Dynamically Allocated Memory"}),"\n",(0,a.jsx)(e.p,{children:"Dynamically allocated memory should be freed to prevent memory leaks."}),"\n",(0,a.jsx)(e.h4,{id:"solution-2",children:"Solution:"}),"\n",(0,a.jsx)(e.p,{children:"Always free() each allocated pointer."})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>t});var i=r(6540);const a={},s=i.createContext(a);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);