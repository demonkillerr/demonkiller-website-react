"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[4296],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>k});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=t.createContext({}),c=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=c(e.components);return t.createElement(o.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,k=d["".concat(o,".").concat(m)]||d[m]||u[m]||l;return n?t.createElement(k,i(i({ref:a},p),{},{components:n})):t.createElement(k,i({ref:a},p))}));function k(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3832:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var t=n(7462),r=(n(7294),n(3905));const l={title:"Building the installer",id:"build-installer",sidebar_label:"Build Installer"},i=void 0,s={unversionedId:"projects/arch-linux-gui/build-installer",id:"projects/arch-linux-gui/build-installer",title:"Building the installer",description:"The installer used in ALG is calamares. Calamares is a distribution independent operating system installer framework. It's written in C++/Qt. This document will show you how to setup calamares. Calamares has a comprehensive guide on it's wiki.",source:"@site/docs/projects/arch-linux-gui/installer.md",sourceDirName:"projects/arch-linux-gui",slug:"/projects/arch-linux-gui/build-installer",permalink:"/docs/projects/arch-linux-gui/build-installer",draft:!1,tags:[],version:"current",lastUpdatedBy:"demonkiller",lastUpdatedAt:1666975014,formattedLastUpdatedAt:"Oct 28, 2022",frontMatter:{title:"Building the installer",id:"build-installer",sidebar_label:"Build Installer"},sidebar:"docs",previous:{title:"Build ALG ISO",permalink:"/docs/projects/arch-linux-gui/build-alg-iso"},next:{title:"Installer Config",permalink:"/docs/projects/arch-linux-gui/installer-config"}},o={},c=[{value:"Building Calamares",id:"building-calamares",level:2},{value:"Packaging calamares for ALG",id:"packaging-calamares-for-alg",level:2},{value:"Get the PKGBUILD file",id:"get-the-pkgbuild-file",level:3},{value:"Making the calamares package",id:"making-the-calamares-package",level:3},{value:"You can skip installing required packages manually and directly install them while building",id:"you-can-skip-installing-required-packages-manually-and-directly-install-them-while-building",level:4},{value:"Make compilation faster",id:"make-compilation-faster",level:3},{value:"Undertand the yield",id:"undertand-the-yield",level:3}],p={toc:c},d="wrapper";function u(e){let{components:a,...n}=e;return(0,r.kt)(d,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The installer used in ALG is calamares. Calamares is a distribution independent operating system installer framework. It's written in C++/Qt. This document will show you how to setup calamares. Calamares has a comprehensive guide on it's ",(0,r.kt)("a",{href:"https://github.com/calamares/calamares/wiki"},"wiki"),"."),(0,r.kt)("h2",{id:"building-calamares"},"Building Calamares"),(0,r.kt)("p",null,"Calamares needs to be compiled(built). Calamares can be built in the following steps. More details can be found on the calamares wiki, linked above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ git clone https://github.com/calamares/calamares.git\n$ mkdir calamares/build\n$ cd calamares/build\n$ cmake -DCMAKE_BUILD_TYPE=Debug ..\n$ make\n")),(0,r.kt)("p",null,"Calamares can then be run either of the following ways"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ./calamares -d\n$ sudo ./calamares -d\n$ pkexec ./calamares -d\n")),(0,r.kt)("h2",{id:"packaging-calamares-for-alg"},"Packaging calamares for ALG"),(0,r.kt)("p",null,"In order to be used by the ",(0,r.kt)("a",{href:"https://wiki.archlinux.org/title/Arch_Build_System"},"Arch Build System"),", calamares needs to be packaged. A package is a precompiled binary, that can be put on a repository and downloaded when building the ISO. "),(0,r.kt)("h3",{id:"get-the-pkgbuild-file"},"Get the PKGBUILD file"),(0,r.kt)("p",null,"The PKGBUILD file used for calamares in ALG is shown below. Copy & save it in a file named ",(0,r.kt)("code",null,"PKGBUILD"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#calamares PKGBUILD for Arch Linux GUI\n\npkgname=calamares\npkgver=3.2.61\npkgrel=1\npkgdesc='Distribution-independent installer framework'\narch=('x86_64')\nlicense=(GPL)\nurl=\"https://github.com/calamares/calamares/releases/download\"\nlicense=('LGPL')\ndepends=('kconfig' 'kcoreaddons' 'kiconthemes' 'ki18n' 'kio' 'solid' 'yaml-cpp' 'kpmcore' 'mkinitcpio-openswap'\n         'boost-libs' 'ckbcomp' 'hwinfo' 'qt5-svg' 'polkit-qt5' 'gtk-update-icon-cache' 'plasma-framework'\n         'qt5-xmlpatterns' 'squashfs-tools' 'libpwquality' 'boost') # 'pythonqt>=3.2')\nmakedepends=('extra-cmake-modules' 'qt5-tools' 'qt5-translations' 'git' 'boost')\nbackup=('usr/share/calamares/modules/bootloader.conf'\n        'usr/share/calamares/modules/displaymanager.conf'\n        'usr/share/calamares/modules/initcpio.conf'\n        'usr/share/calamares/modules/unpackfs.conf')\n\nsource=(\"$pkgname-$pkgver-$pkgrel.tar.gz::$url/v$pkgver/calamares-$pkgver.tar.gz\")\nsha256sums=('9ec6c49f4e2316cd3058d402c2ab65efff02e3f09a0028d50f0359e5154e6c8c')\n\nprepare() {\n    cd ${srcdir}/calamares-${pkgver}\n    sed -i -e 's/\"Install configuration files\" OFF/\"Install configuration files\" ON/' CMakeLists.txt\n    sed -i -e 's/# DEBUG_FILESYSTEMS/DEBUG_FILESYSTEMS/' \"$srcdir/${pkgname}-${pkgver}/CMakeLists.txt\"\n\n    # modify desktop file\n    sed -i -e 's#Exec=sh.*#Exec=sh -c \"/etc/calamares/launch.sh\"#g' \"$srcdir/${pkgname}-${pkgver}/calamares.desktop\"\n    sed -i -e 's#Name=.*#Name=Install Arch Linux#g' \"$srcdir/${pkgname}-${pkgver}/calamares.desktop\"\n    sed -i -e 's#GenericName=.*#GenericName=Arch Linux Installer#g' \"$srcdir/${pkgname}-${pkgver}/calamares.desktop\"\n    sed -i -e 's#Icon=.*#Icon=archlinux-logo#g' \"$srcdir/${pkgname}-${pkgver}/calamares.desktop\"\n    sed -i -e 's#Comment=.*#Comment=Arch Linux Installer#g' \"$srcdir/${pkgname}-${pkgver}/calamares.desktop\"\n\n\n    # patches here\n\n    # change version\n    _ver=\"$(cat CMakeLists.txt | grep -m3 -e \"  VERSION\" | grep -o \"[[:digit:]]*\" | xargs | sed s'/ /./g')\"\n    printf 'Version: %s-%s' \"${_ver}\" \"${pkgrel}\"\n    sed -i -e \"s|\\${CALAMARES_VERSION_MAJOR}.\\${CALAMARES_VERSION_MINOR}.\\${CALAMARES_VERSION_PATCH}|${_ver}-${pkgrel}|g\" CMakeLists.txt\n    sed -i -e \"s|CALAMARES_VERSION_RC 1|CALAMARES_VERSION_RC 0|g\" CMakeLists.txt\n\n}\n\nbuild() {\n    cd ${srcdir}/calamares-${pkgver}\n\n    mkdir -p build\n    cd build\n        cmake .. \\\n              -DCMAKE_BUILD_TYPE=Release \\\n              -DCMAKE_INSTALL_PREFIX=/usr \\\n              -DCMAKE_INSTALL_LIBDIR=lib \\\n              -DWITH_PYTHONQT:BOOL=ON \\\n              -DBoost_NO_BOOST_CMAKE=ON \\\n              -DSKIP_MODULES=\"tracking webview interactiveterminal initramfs \\\n                              initramfscfg dracut dracutlukscfg \\\n                              dummyprocess dummypython dummycpp \\\n                              dummypythonqt services-openrc\"\n        make\n}\n\npackage() {\n    cd ${srcdir}/calamares-${pkgver}/build\n    make DESTDIR=\"$pkgdir\" install\n    \n}\n")),(0,r.kt)("h3",{id:"making-the-calamares-package"},"Making the calamares package"),(0,r.kt)("p",null,"In order to make the calamares package for ALG, install the following packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -Sy yaml-cpp kpmcore hwinfo qt5-xmlpatterns libpwquality qt5-translations extra-cmake-modules squashfs-tools boost\n")),(0,r.kt)("p",null,"The following packages are in the AUR. You can install them with yay or paru."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"paru -S mkinitcpio-openswap ckbcomp\n")),(0,r.kt)("h4",{id:"you-can-skip-installing-required-packages-manually-and-directly-install-them-while-building"},"You can skip installing required packages manually and directly install them while building"),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"AUR packages might not install this way")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Make sure you run the following command in the directory containing the PKGBUILD.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"makepkg -sc\n")),(0,r.kt)("h3",{id:"make-compilation-faster"},"Make compilation faster"),(0,r.kt)("p",null,"Make compilation faster by using all CPU threads availble on host system. In makepkg.conf allocate all cores like this. Make sure you uncomment ",(0,r.kt)("code",null,"MAKEFLAGS"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=/etc/makepkg.conf",title:"/etc/makepkg.conf"},'MAKEFLAGS="-j$(nproc)"\n')),(0,r.kt)("h3",{id:"undertand-the-yield"},"Undertand the yield"),(0,r.kt)("p",null,"Once compilation is done, makepkg will yield the package itself and some other files. A package should be a tarball in .zstd format. You should see something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pkgname-pkgver-pkgrel-arch-pkg.tar.zst\ncalamares-3.2.61-1-x86_64.pkg.tar.zst\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("code",null,"pkg")," folder contains the uncompressed tarball and ",(0,r.kt)("code",null,"src")," contains the cloned repository. Make sure you cleanup this folder when making a new package. This package can be deployed on any repository."))}u.isMDXComponent=!0}}]);