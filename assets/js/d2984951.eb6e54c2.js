"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[2437],{2866:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>t,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"code/languages/C/modular","title":"Modular Programming in C","description":"This document covers Modular Programming in C.","source":"@site/docs/code/languages/C/modular.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/modular","permalink":"/docs/code/languages/C/modular","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Gaurang","lastUpdatedAt":1739855289000,"frontMatter":{"title":"Modular Programming in C","id":"modular","sidebar_label":"Modular Programming"},"sidebar":"docs","previous":{"title":"Structures and Unions","permalink":"/docs/code/languages/C/structs_and_unions"},"next":{"title":"Files I/O","permalink":"/docs/code/languages/C/fileio"}}');var a=i(4848),o=i(8453);const t={title:"Modular Programming in C",id:"modular",sidebar_label:"Modular Programming"},r=void 0,s={},d=[{value:"Why Use Header Files?",id:"why-use-header-files",level:2},{value:"Benefits of .h Files:",id:"benefits-of-h-files",level:4},{value:"Structuring a Modular C Program",id:"structuring-a-modular-c-program",level:2},{value:"Example: Splitting Code into Multiple Files",id:"example-splitting-code-into-multiple-files",level:4},{value:"File Structure",id:"file-structure",level:5},{value:"<code>math_operations.h</code> (Header File)",id:"math_operationsh-header-file",level:5},{value:"<code>math_operations.c</code> (Implementation File)",id:"math_operationsc-implementation-file",level:5},{value:"<code>main.c</code> (Main Program)",id:"mainc-main-program",level:5},{value:"Compiling Modular Code with Makefiles",id:"compiling-modular-code-with-makefiles",level:2},{value:"Why Use a Makefile?",id:"why-use-a-makefile",level:3},{value:"Example Makefile for this program",id:"example-makefile-for-this-program",level:3},{value:"Explaination",id:"explaination",level:3},{value:"To compile, run:",id:"to-compile-run",level:5},{value:"To remove compiled files:",id:"to-remove-compiled-files",level:5}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This document covers Modular Programming in C."}),"\n",(0,a.jsx)(n.p,{children:"Modular programming is a software design approach that promotes breaking down programs into smaller, reusable components. In C, this is achieved using header files (.h) to declare functions and separate implementation files (.c) to define them. This approach improves code reusability, maintainability, and organization."}),"\n",(0,a.jsx)(n.p,{children:"In this section, we will cover:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Using header files (.h) for function declarations."}),"\n",(0,a.jsx)(n.li,{children:"Separating implementation into multiple .c files."}),"\n",(0,a.jsx)(n.li,{children:"Compiling modular code using Makefiles."}),"\n",(0,a.jsx)(n.li,{children:"Understanding Makefiles in depth."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"why-use-header-files",children:"Why Use Header Files?"}),"\n",(0,a.jsx)(n.h4,{id:"benefits-of-h-files",children:"Benefits of .h Files:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Encapsulation \u2013 Hide implementation details while exposing only function declarations."}),"\n",(0,a.jsx)(n.li,{children:"Code Reusability \u2013 Functions can be reused in multiple files."}),"\n",(0,a.jsx)(n.li,{children:"Separation of Concerns \u2013 Keeps function prototypes separate from definitions for better organization."}),"\n",(0,a.jsx)(n.li,{children:"Compile-Time Safety \u2013 Ensures function prototypes are known before they are used."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"structuring-a-modular-c-program",children:"Structuring a Modular C Program"}),"\n",(0,a.jsx)(n.h4,{id:"example-splitting-code-into-multiple-files",children:"Example: Splitting Code into Multiple Files"}),"\n",(0,a.jsx)(n.h5,{id:"file-structure",children:"File Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"project/\n\u2502\u2500\u2500 main.c\n\u2502\u2500\u2500 math_operations.c\n\u2502\u2500\u2500 math_operations.h\n\u2502\u2500\u2500 Makefile\n"})}),"\n",(0,a.jsxs)(n.h5,{id:"math_operationsh-header-file",children:[(0,a.jsx)(n.code,{children:"math_operations.h"})," (Header File)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"#ifndef MATH_OPERATIONS_H\n#define MATH_OPERATIONS_H\n\n// Function prototypes\nint add(int a, int b);\nint multiply(int a, int b);\n\n#endif // MATH_OPERATIONS_H\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"Only function prototypes (declarations) are defined here."})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"#ifndef"}),", ",(0,a.jsx)(n.code,{children:"#define"}),", and ",(0,a.jsx)(n.code,{children:"#endif"})," prevent multiple inclusions of the header file.\nThey are known as inclusion guards."]})}),"\n",(0,a.jsxs)(n.h5,{id:"math_operationsc-implementation-file",children:[(0,a.jsx)(n.code,{children:"math_operations.c"})," (Implementation File)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:'#include "math_operations.h"\n\n// Function implementations\nint add(int a, int b) {\n    return a + b;\n}\n\nint multiply(int a, int b) {\n    return a * b;\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"Implements the functions declared in math_operations.h."})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:'#include "math_operations.h"'})," ensures function prototypes match their implementations."]})}),"\n",(0,a.jsxs)(n.h5,{id:"mainc-main-program",children:[(0,a.jsx)(n.code,{children:"main.c"})," (Main Program)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include "math_operations.h"\n\nint main() {\n    int x = 5, y = 10;\n    printf("Sum: %d\\n", add(x, y));\n    printf("Product: %d\\n", multiply(x, y));\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Uses functions from ",(0,a.jsx)(n.code,{children:"math_operations.h"})," without exposing their implementations."]})}),"\n",(0,a.jsx)(n.h2,{id:"compiling-modular-code-with-makefiles",children:"Compiling Modular Code with Makefiles"}),"\n",(0,a.jsx)(n.h3,{id:"why-use-a-makefile",children:"Why Use a Makefile?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Automates compilation"})," \u2013 No need to type long gcc commands."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Tracks dependencies"})," \u2013 Only recompiles changed files, making builds faster."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Organized build process"})," \u2013 Ensures consistent and structured compilation."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"example-makefile-for-this-program",children:"Example Makefile for this program"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-make",children:"CC = gcc\nCFLAGS = -Wall\n\nall: main\n\nmain: main.o math_operations.o\n\t$(CC) $(CFLAGS) -o main main.o math_operations.o\n\nmain.o: main.c math_operations.h\n\t$(CC) $(CFLAGS) -c main.c\n\nmath_operations.o: math_operations.c math_operations.h\n\t$(CC) $(CFLAGS) -c math_operations.c\n\nclean:\n\trm -f *.o main\n"})}),"\n",(0,a.jsx)(n.h3,{id:"explaination",children:"Explaination"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"CC = gcc sets the compiler."}),"\n",(0,a.jsx)(n.li,{children:"CFLAGS = -Wall enables warnings."}),"\n",(0,a.jsx)(n.li,{children:"all: defines the default target (main executable)."}),"\n",(0,a.jsx)(n.li,{children:"main: depends on main.o and math_operations.o."}),"\n",(0,a.jsx)(n.li,{children:"clean: removes compiled files."}),"\n"]}),"\n",(0,a.jsx)(n.h5,{id:"to-compile-run",children:"To compile, run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"make\n"})}),"\n",(0,a.jsx)(n.h5,{id:"to-remove-compiled-files",children:"To remove compiled files:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"make clean\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>r});var l=i(6540);const a={},o=l.createContext(a);function t(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);