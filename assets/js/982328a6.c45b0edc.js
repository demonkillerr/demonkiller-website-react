"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[4966],{9231:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"code/languages/C/structs_and_unions","title":"Structures and Unions","description":"This document covers structures and unions in C.","source":"@site/docs/code/languages/C/structs_and_union.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/structs_and_unions","permalink":"/docs/code/languages/C/structs_and_unions","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"demonkiller","lastUpdatedAt":1739841205000,"frontMatter":{"title":"Structures and Unions","id":"structs_and_unions","sidebar_label":"Structures and Unions"},"sidebar":"docs","previous":{"title":"Strings","permalink":"/docs/code/languages/C/strings"},"next":{"title":"Modular Programming","permalink":"/docs/code/languages/C/modular"}}');var t=s(4848),i=s(8453);const a={title:"Structures and Unions",id:"structs_and_unions",sidebar_label:"Structures and Unions"},l=void 0,d={},c=[{value:"What is a Structures (struct)",id:"what-is-a-structures-struct",level:2},{value:"Declaring a Structure",id:"declaring-a-structure",level:3},{value:"Defining and Initializing a Structure Variable",id:"defining-and-initializing-a-structure-variable",level:3},{value:"Accessing Structure Members",id:"accessing-structure-members",level:3},{value:"Using <code>typedef</code> with Structures",id:"using-typedef-with-structures",level:2},{value:"Arrays of Structures",id:"arrays-of-structures",level:2},{value:"Nested Structures",id:"nested-structures",level:2},{value:"Pointers to Structures",id:"pointers-to-structures",level:2},{value:"Unions (union)",id:"unions-union",level:2},{value:"Declaring and Using a Union",id:"declaring-and-using-a-union",level:3},{value:"Differences Between Structures and Unions",id:"differences-between-structures-and-unions",level:2},{value:"Use Cases of Structures and Unions",id:"use-cases-of-structures-and-unions",level:2},{value:"When to Use Unions",id:"when-to-use-unions",level:3},{value:"Common Pitfalls and Best Practices",id:"common-pitfalls-and-best-practices",level:2},{value:"Using Unions Without Understanding Memory Overlap",id:"using-unions-without-understanding-memory-overlap",level:3},{value:"Solution:",id:"solution",level:4},{value:"Forgetting typedef for Readability",id:"forgetting-typedef-for-readability",level:3},{value:"Solution:",id:"solution-1",level:4},{value:"Dangling Pointers to Structures",id:"dangling-pointers-to-structures",level:3},{value:"Solution:",id:"solution-2",level:4}];function o(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This document covers structures and unions in C."}),"\n",(0,t.jsx)(n.p,{children:"Structures and unions are user-defined data types in C that allow grouping related variables under a single name. While structures store each member separately, unions share memory among members."}),"\n",(0,t.jsx)(n.p,{children:"In this section, we will cover:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Structures (struct) \u2013 Declaration, initialization, and usage."}),"\n",(0,t.jsx)(n.li,{children:"Nested structures and arrays of structures."}),"\n",(0,t.jsx)(n.li,{children:"Unions (union) \u2013 Memory sharing and key differences from structures."}),"\n",(0,t.jsx)(n.li,{children:"Practical use cases of structures and unions."}),"\n",(0,t.jsx)(n.li,{children:"Common pitfalls and best practices."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-structures-struct",children:"What is a Structures (struct)"}),"\n",(0,t.jsx)(n.p,{children:"A structure groups different data types together."}),"\n",(0,t.jsx)(n.h3,{id:"declaring-a-structure",children:"Declaring a Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"struct Person {\n    char name[50];\n    int age;\n    float height;\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"defining-and-initializing-a-structure-variable",children:"Defining and Initializing a Structure Variable"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'struct Person person1 = {"Alice", 25, 5.7};\n'})}),"\n",(0,t.jsx)(n.p,{children:"Alternatively, members can be assigned later:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'struct Person person2;\nperson2.age = 30;\nstrcpy(person2.name, "Bob");\nperson2.height = 6.1;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"accessing-structure-members",children:"Accessing Structure Members"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'printf("Name: %s\\n", person1.name);\nprintf("Age: %d\\n", person1.age);\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"using-typedef-with-structures",children:["Using ",(0,t.jsx)(n.code,{children:"typedef"})," with Structures"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"typedef"})," allows defining an alias for a structure."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'typedef struct {\n    char name[50];\n    int age;\n} Person;\n\nPerson p1 = {"Charlie", 28};\nprintf("%s is %d years old\\n", p1.name, p1.age);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"arrays-of-structures",children:"Arrays of Structures"}),"\n",(0,t.jsx)(n.p,{children:"Structures can be stored in arrays."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'struct Person people[2] = {\n    {"Alice", 25, 5.7},\n    {"Bob", 30, 6.1}\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"Iterating Over an Array of Structures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'for (int i = 0; i < 2; i++) {\n    printf("%s is %d years old\\n", people[i].name, people[i].age);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"nested-structures",children:"Nested Structures"}),"\n",(0,t.jsx)(n.p,{children:"Structures can contain other structures."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'struct Address {\n    char city[50];\n    int zipCode;\n};\n\nstruct Employee {\n    char name[50];\n    struct Address address;\n};\n\nstruct Employee emp1 = {"John", {"New York", 10001}};\nprintf("%s lives in %s\\n", emp1.name, emp1.address.city);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"pointers-to-structures",children:"Pointers to Structures"}),"\n",(0,t.jsx)(n.p,{children:"Using pointers makes structure handling more efficient."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'struct Person p1 = {"Alice", 25, 5.7};\nstruct Person *ptr = &p1;\nprintf("Name: %s\\n", ptr->name);\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ptr->name"})," is shorthand for ",(0,t.jsx)(n.code,{children:"(*ptr).name"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"unions-union",children:"Unions (union)"}),"\n",(0,t.jsx)(n.p,{children:"A union shares memory among all its members, meaning only one member can hold a value at a time."}),"\n",(0,t.jsx)(n.h3,{id:"declaring-and-using-a-union",children:"Declaring and Using a Union"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'union Data {\n    int i;\n    float f;\n    char str[20];\n};\n\nunion Data d;\nd.i = 10;\nprintf("i: %d\\n", d.i);\nd.f = 3.14;\nprintf("f: %f\\n", d.f);\nprintf("i after setting f: %d\\n", d.i); // Overwritten!\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"Since memory is shared, updating one member affects all others."})}),"\n",(0,t.jsx)(n.h2,{id:"differences-between-structures-and-unions",children:"Differences Between Structures and Unions"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsxs)(n.th,{children:["Structure (",(0,t.jsx)(n.code,{children:"struct"}),")"]}),(0,t.jsxs)(n.th,{children:["Union (",(0,t.jsx)(n.code,{children:"union"}),")"]})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Memory Usage"})}),(0,t.jsx)(n.td,{children:"Each member gets separate memory"}),(0,t.jsx)(n.td,{children:"All members share the same memory"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Access"})}),(0,t.jsx)(n.td,{children:"All members can hold values at the same time"}),(0,t.jsx)(n.td,{children:"Only one member holds a value at a time"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Use Cases"})}),(0,t.jsx)(n.td,{children:"Data records, objects with multiple fields"}),(0,t.jsx)(n.td,{children:"Memory-efficient storage for different types"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"use-cases-of-structures-and-unions",children:"Use Cases of Structures and Unions"}),"\n",(0,t.jsx)(n.p,{children:"###When to Use Structures"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Representing entities like employees, students, cars, etc."}),"\n",(0,t.jsx)(n.li,{children:"Storing multiple related attributes (e.g., name, age, salary)."}),"\n",(0,t.jsx)(n.li,{children:"Creating arrays of records (e.g., storing multiple employees)."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"when-to-use-unions",children:"When to Use Unions"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Optimizing memory usage for variables that do not need to exist simultaneously."}),"\n",(0,t.jsx)(n.li,{children:"Handling variant data types (e.g., storing either int, float, or char[])."}),"\n",(0,t.jsx)(n.li,{children:"Implementing low-level hardware registers in embedded systems."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-pitfalls-and-best-practices",children:"Common Pitfalls and Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"using-unions-without-understanding-memory-overlap",children:"Using Unions Without Understanding Memory Overlap"}),"\n",(0,t.jsx)(n.h4,{id:"solution",children:"Solution:"}),"\n",(0,t.jsx)(n.p,{children:"Only store one value at a time in a union."}),"\n",(0,t.jsx)(n.h3,{id:"forgetting-typedef-for-readability",children:"Forgetting typedef for Readability"}),"\n",(0,t.jsx)(n.h4,{id:"solution-1",children:"Solution:"}),"\n",(0,t.jsx)(n.p,{children:"Use typedef to simplify structure usage."}),"\n",(0,t.jsx)(n.h3,{id:"dangling-pointers-to-structures",children:"Dangling Pointers to Structures"}),"\n",(0,t.jsx)(n.h4,{id:"solution-2",children:"Solution:"}),"\n",(0,t.jsx)(n.p,{children:"Ensure pointers to structures are initialized correctly and not freed prematurely."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);