"use strict";(self.webpackChunkdemonkiller_portfolio=self.webpackChunkdemonkiller_portfolio||[]).push([[4500],{3267:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"code/languages/C/setupandfirstprogram","title":"Setup developement environment and first program","description":"This document covers setting up compilers and a text editor. It also covers a basic program, that can run to check if everything works.","source":"@site/docs/code/languages/C/setup_and_fp.md","sourceDirName":"code/languages/C","slug":"/code/languages/C/setupandfirstprogram","permalink":"/docs/code/languages/C/setupandfirstprogram","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Gaurang","lastUpdatedAt":1739718315000,"frontMatter":{"title":"Setup developement environment and first program","id":"setupandfirstprogram","sidebar_label":"Setup & First Program"},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/docs/code/languages/C/intro"},"next":{"title":"Tools","permalink":"/docs/category/tools"}}');var i=s(4848),a=s(8453);const r={title:"Setup developement environment and first program",id:"setupandfirstprogram",sidebar_label:"Setup & First Program"},l=void 0,t={},d=[{value:"Download and install GCC and Make",id:"download-and-install-gcc-and-make",level:2},{value:"Arch Linux",id:"arch-linux",level:3},{value:"Debian/Ubuntu",id:"debianubuntu",level:3},{value:"Fedora/RHEL",id:"fedorarhel",level:3},{value:"MacOS X",id:"macos-x",level:3},{value:"Windows 10/11",id:"windows-1011",level:3},{value:"Download Visual Studio Code",id:"download-visual-studio-code",level:2},{value:"Arch Linux",id:"arch-linux-1",level:3},{value:"Debian/Ubuntu",id:"debianubuntu-1",level:3},{value:"Fedora/RHEL",id:"fedorarhel-1",level:3},{value:"MacOS",id:"macos",level:3},{value:"Windows",id:"windows",level:3},{value:"Setup VS Code",id:"setup-vs-code",level:2},{value:"Enable run code in Code Runner",id:"enable-run-code-in-code-runner",level:2},{value:"First Program",id:"first-program",level:2},{value:"Test Code Runner",id:"test-code-runner",level:3},{value:"Test Make",id:"test-make",level:3},{value:"Directory Structure",id:"directory-structure",level:4}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This document covers setting up compilers and a text editor. It also covers a basic program, that can run to check if everything works."}),"\n",(0,i.jsx)(n.p,{children:"C is a compiled language, so inorder to run your C program, you need a compiler. GCC (GNU Compiler Collection) is a widely used compiler because its free, open source, and widely available."}),"\n",(0,i.jsx)(n.p,{children:"You also need a text editor to write your code. You can use anything from command line text editors like Vi(m), Nano or Emacs, to graphical text editors like VS-Code, KATE, Gedit, Notepad(++). This reference assumes you want to use VS-Code. This is because VS-Code is a good beginner's text editor and has support for a wide variety of plugins, some of which are used and mentioned in this reference document. This allows users to compile and run with the click of a button. VS-code is also widely available across many operating systems."}),"\n",(0,i.jsx)(n.p,{children:"We will also be using Make, a powerfull build tool for automating C builds."}),"\n",(0,i.jsx)(n.h2,{id:"download-and-install-gcc-and-make",children:"Download and install GCC and Make"}),"\n",(0,i.jsx)(n.p,{children:"GCC and make are available in most linux distributions."}),"\n",(0,i.jsx)(n.h3,{id:"arch-linux",children:"Arch Linux"}),"\n",(0,i.jsx)(n.p,{children:"On Arch Linux or derivatives distributions, GCC can be looked for or installed by:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check if GCC and make are present in your system:\npacman -Qi gcc\npacman -Qi make\n\n# If gcc is not present, install GCC\nsudo pacman -S gcc make\n\n# Install everything:\nsudo pacman -S base-devel\n"})}),"\n",(0,i.jsx)(n.h3,{id:"debianubuntu",children:"Debian/Ubuntu"}),"\n",(0,i.jsx)(n.p,{children:"On Debian, Ubuntu or it's derivatives,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check if GCC is present in your system:\napt search gcc\napt search make\n\n# If gcc is not present, install GCC\nsudo apt install gcc make\n\n# Install everything:\nsudo apt install build-essential\n"})}),"\n",(0,i.jsx)(n.h3,{id:"fedorarhel",children:"Fedora/RHEL"}),"\n",(0,i.jsx)(n.p,{children:"For RHEL, Fedora, CentOS, or it's derivatives,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check if GCC is present in your system:\ndnf info gcc\ndnf info make\n\n# If gcc is not present, install GCC\nsudo dnf install gcc make\n\n# Install everything:\nsudo dnf groupinstall "Development Tools"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"macos-x",children:"MacOS X"}),"\n",(0,i.jsxs)(n.p,{children:["For MacOS, download the ",(0,i.jsx)(n.a,{href:"https://brew.sh/",children:"HomeBrew"})," package manager and install gcc and make by:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"brew install gcc make\n"})}),"\n",(0,i.jsx)(n.h3,{id:"windows-1011",children:"Windows 10/11"}),"\n",(0,i.jsxs)(n.p,{children:["For Windows, ideally the best option is to use ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/windows/wsl/install",children:"Windows Subsystem for Linux - WSL"}),", and then follow the steps for either ",(0,i.jsx)(n.a,{href:"#debianubuntu",children:"Debian/Ubuntu"}),", ",(0,i.jsx)(n.a,{href:"#arch-linux",children:"Arch"})," or ",(0,i.jsx)(n.a,{href:"#fedorarhel",children:"Fedora"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, you can install ",(0,i.jsx)(n.a,{href:"https://www.mingw-w64.org/",children:"MinGW"}),", and a UNIX like terminal such as ",(0,i.jsx)(n.a,{href:"https://mobaxterm.mobatek.net/",children:"MobaXTerm"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"download-visual-studio-code",children:"Download Visual Studio Code"}),"\n",(0,i.jsx)(n.p,{children:"Visual Studio Code, commonly referred to as VS Code, is an integrated development environment developed by Microsoft for Windows, Linux, MacOS and web browsers."}),"\n",(0,i.jsx)(n.h3,{id:"arch-linux-1",children:"Arch Linux"}),"\n",(0,i.jsxs)(n.p,{children:["On Arch Linux or derivatives distributions, the ",(0,i.jsx)(n.a,{href:"https://aur.archlinux.org/packages/visual-studio-code-bin",children:"AUR version"})," should be installed. This is because the VS Code version in the repository doesn't have support for extensions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install manually (requires git)\ngit clone https://aur.archlinux.org/visual-studio-code-bin.git\ncd visual-studio-code-bin\nmakepkg -sirc\n\n# If you have chaotic AUR enabled,\nsudo pacman -S visual-studio-code-bin\n\n# Use a build tool\nparu visual-studio-code-bin\nyay -S visual-studio-code-bin\n"})}),"\n",(0,i.jsx)(n.h3,{id:"debianubuntu-1",children:"Debian/Ubuntu"}),"\n",(0,i.jsxs)(n.p,{children:["On Debian, Ubuntu or their derivatives, you can ",(0,i.jsx)(n.a,{href:"https://code.visualstudio.com/Download",children:"download"})," the .deb file and install it using"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt install ./<file>.deb\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also enable Microsoft repositories. This allows you to update vs-code via ",(0,i.jsx)("code",{children:"apt upgrade"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'sudo apt install wget gpg -y\n\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /usr/share/keyrings/packages.microsoft.gpg > /dev/null\n\necho "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null\n\nsudo apt update\n\nsudo apt install code -y\n'})}),"\n",(0,i.jsx)(n.h3,{id:"fedorarhel-1",children:"Fedora/RHEL"}),"\n",(0,i.jsxs)(n.p,{children:["For Fedora, RHEL, CentOS or derivative operating systems, you can ",(0,i.jsx)(n.a,{href:"https://code.visualstudio.com/Download",children:"download"})," .rpm file. You can install this file using dnf or rpm"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# dnf\nsudo dnf install ./vscode.rpm -y\n\n# rpm\nsudo rpm -i vscode.rpm\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Just like Debian, you can optionally enable Microsoft repositories and get VS Code from there. This allows you to update vs-code via ",(0,i.jsx)("code",{children:"dnf check-update"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Add Microsoft Repository\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\n\nsudo tee /etc/yum.repos.d/vscode.repo <<EOF\n[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\nEOF\n\n# Update Package List:\nsudo dnf check-update\n\n# Install VS Code:\nsudo dnf install code -y\n"})}),"\n",(0,i.jsx)(n.h3,{id:"macos",children:"MacOS"}),"\n",(0,i.jsxs)(n.p,{children:["VS Code can be installed on MacOS using ",(0,i.jsx)(n.a,{href:"https://brew.sh/",children:"HomeBrew"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"brew install --cask visual-studio-code\n"})}),"\n",(0,i.jsx)(n.h3,{id:"windows",children:"Windows"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://code.visualstudio.com/Download",children:"Download"})," VS Code, and follow the instructions to install VS Code on Windows."]}),"\n",(0,i.jsx)(n.h2,{id:"setup-vs-code",children:"Setup VS Code"}),"\n",(0,i.jsxs)(n.p,{children:["Once you open VS Code, press ",(0,i.jsx)("code",{children:"CTRL + SHIFT + X"})," to open the extensions window. We will install the following extensions,"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Code Runner"}),"\n",(0,i.jsx)(n.li,{children:"C/C++ extension from Microsoft (for Intellisense)"}),"\n",(0,i.jsx)(n.li,{children:"Makefile tools"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Search for these, and click on install to install them. You may need to restart VS Code in order for them to work properly."}),"\n",(0,i.jsx)(n.h2,{id:"enable-run-code-in-code-runner",children:"Enable run code in Code Runner"}),"\n",(0,i.jsx)(n.p,{children:"In Code runner, select the following settings:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Clear Previous Output"}),"\n",(0,i.jsx)(n.li,{children:"Run In Terminal"}),"\n",(0,i.jsx)(n.li,{children:"Save File Before Run"}),"\n",(0,i.jsx)(n.li,{children:"Show Run Command In Editor Title Menu"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Some of them might have already been checked so just check the one's that aren't."}),"\n",(0,i.jsx)(n.h2,{id:"first-program",children:"First Program"}),"\n",(0,i.jsx)(n.p,{children:"Copy and paste the program below into a new text file in VS Code. Name the file hello.c."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-C",children:'#include <stdio.h>  // Include standard I/O library\n\nint main() {\n    printf("Hello, World!\\n");  // Print to console\n    return 0;  // Exit program successfully\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test-code-runner",children:"Test Code Runner"}),"\n",(0,i.jsx)(n.p,{children:"Press the run button on the top right hand side of the editor."}),"\n",(0,i.jsx)(n.h3,{id:"test-make",children:"Test Make"}),"\n",(0,i.jsx)(n.p,{children:"In order to test make, create a new file, name it Makefile, and copy the following code in it. While this might seem like an overkill for just a simple program, it is an important tool for large applications."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-make",children:"CC = gcc\nCFLAGS = -Wall\n\nall: hello\n\nhello: hello.c\n\t$(CC) $(CFLAGS) -o hello hello.c\n\nclean:\n\trm -f hello\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can build and run using,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Build the binary\nmake\n\n# Run the binary\n./hello\n\n# Remove the binary\nmake clean\n"})}),"\n",(0,i.jsx)(n.h4,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 hello.c\n\u2514\u2500\u2500 Makefile\n\n1 directory, 2 files\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var o=s(6540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);